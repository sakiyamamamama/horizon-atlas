{"pageProps":{"mdBlocks":[{"type":"paragraph","blockId":"16c2297f-7a72-81cc-ae10-f615027777b5","parent":"今回はクラスの継承について紹介します。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81ab-9193-fe93473369ad","parent":"なお、このページは前期カリキュラム「[**１２.クラス**](/9b646455ad974736b897de960df9d051)」に載っている知識が前提となっています。","children":[]},{"type":"heading_2","blockId":"16c2297f-7a72-81d8-977c-c8d1f517f51e","parent":"## 継承の概要","children":[]},{"type":"divider","blockId":"16c2297f-7a72-8194-a2af-df00f5691a4f","parent":"---","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-814c-b5fb-cc2edb58a0a3","parent":"クラスの**継承**は、**既存のクラスの属性とメソッドを引き継いで新しいクラスを作る仕組み**です。これにより、コードを再利用しやすくなり、共通の機能をもつ親クラスにまとめて管理することができます。親クラスを継承したクラスを子クラスと呼びます。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-814a-98d6-ed72d80a2159","parent":"ちなみに、親クラスは基底クラスやスーパークラスとも呼ばれ、子クラスは派生クラスやサブクラスとも呼ばれます。","children":[]},{"type":"image","blockId":"16c2297f-7a72-810a-8f23-c62ebd2f82e0","parent":"![%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-20_15.37.20.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f9e367dd-1db7-428f-a2ed-c68a46952d5a/f5968834-beab-4ebc-9dfa-94e8ccb26276/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-20_15.37.20.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46632HGVP2P%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T151705Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDQaCXVzLXdlc3QtMiJGMEQCIHzLf7ru%2BgT%2FSNuchaymY9RQpcSgiy8P4Ab8Z%2FkqZDYjAiAELtbMlGMGystP0DxF%2BU0cPx9MDZR3X3hkIG8os%2BBRfSr%2FAwhdEAAaDDYzNzQyMzE4MzgwNSIMFZNBhKDexPkLpRDQKtwDHew0RyCYJFFIRNboqEV4Dz3ENgivWItEZL8vyd6zxQOP%2BOU89QVibAop%2FR2rNmfhP7DDoAW%2BVdtSge6kkeHfarkboYh8HMCSLrrjleuqT949%2BUBNUntYrBipZdXH4k8iZMNiGy7qJN1%2BIrE%2BOaE%2BrEnWtAA%2B%2BN96fkIpqMM2IxbrMLDll53rbE4Ifa38go%2F%2FnJemgDJZay%2FBEcZrC%2BhbWUdHeXziUFpB7NPMFe6%2FBZYw0zGs5eFivli%2BmSuciazXQh5E7mMehhoA6q7Nm4lfD77QaswF2VJR5vLcy9%2Bf1p7%2FyRhrW1O0Ky4NexNjTWL6Wdst0BANGrlIKgS0um1v0Fk9VxfG7o9QX43Gx8Q%2FKn%2Ft0lTAke882GTleuMnY%2Bfb1fS1uZqpV76%2FnlxiX4wV%2Ft5TeZjanC5kgLmqXT7WixymhOjpp6CBSBdxy7qbpE%2FXMoizbBBhRwRLR0Kaiv1l0hhfD7WP8IX%2FUa5ENZ%2BfwWiRy5gY3%2BKVNfK8CO4oO9lvATY%2BpLz4Ywg6n1ZijEKVtv0Ga%2B7dLoaIa79ma3jurBYjRhMVr9%2BcU1KR7WA2p8WR%2BrUHQD5fkCr5uS0pJy2nZa1XmpvgYBXLO%2Bs6vmfablgxP%2BteKX5uA2Oz%2BgYwvKTHvQY6pgG%2FICIpbEfAoH0p%2BYSZYpYV326HlyPTDyQfeTIwxDukT2n5No7RNpfEJJBEFRhWHv8vMx5HWmzw02b9pjxmGCk3FbthyGScjj%2BAvFfg2QauD2eVtxojro%2B%2FBEndqEGGJ6hVDv%2BUSC8qKlq0H7HbTv%2FTi8sF6vXn%2BOFCU%2BABt%2Fx8g1azCs9DfUmPpalmjfBsl70dkF%2B%2Btzs03Oa8VO585DRl3U5eQML%2B&X-Amz-Signature=12f4462376ab4c72d8fcdc90965b62857b72baa8279aed52c9e4d59437994a66&X-Amz-SignedHeaders=host&x-id=GetObject)","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81f2-b3b9-e1ddbae35f46","parent":"継承すると、子クラスは親クラスの属性やメソッドを全て使える状態になります。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81de-8173-f510afbeb3c5","parent":"子クラスは、親クラスから引き継いだ上で、属性やメソッドを追加したり、メソッドを書き換えたりすることができます。","children":[]},{"type":"image","blockId":"16c2297f-7a72-8161-adb3-c9e2b77a54c2","parent":"![%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_9.50.39.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f9e367dd-1db7-428f-a2ed-c68a46952d5a/ca535bb9-ff5f-4005-94a4-f7b7e5adfca1/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_9.50.39.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46632HGVP2P%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T151705Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDQaCXVzLXdlc3QtMiJGMEQCIHzLf7ru%2BgT%2FSNuchaymY9RQpcSgiy8P4Ab8Z%2FkqZDYjAiAELtbMlGMGystP0DxF%2BU0cPx9MDZR3X3hkIG8os%2BBRfSr%2FAwhdEAAaDDYzNzQyMzE4MzgwNSIMFZNBhKDexPkLpRDQKtwDHew0RyCYJFFIRNboqEV4Dz3ENgivWItEZL8vyd6zxQOP%2BOU89QVibAop%2FR2rNmfhP7DDoAW%2BVdtSge6kkeHfarkboYh8HMCSLrrjleuqT949%2BUBNUntYrBipZdXH4k8iZMNiGy7qJN1%2BIrE%2BOaE%2BrEnWtAA%2B%2BN96fkIpqMM2IxbrMLDll53rbE4Ifa38go%2F%2FnJemgDJZay%2FBEcZrC%2BhbWUdHeXziUFpB7NPMFe6%2FBZYw0zGs5eFivli%2BmSuciazXQh5E7mMehhoA6q7Nm4lfD77QaswF2VJR5vLcy9%2Bf1p7%2FyRhrW1O0Ky4NexNjTWL6Wdst0BANGrlIKgS0um1v0Fk9VxfG7o9QX43Gx8Q%2FKn%2Ft0lTAke882GTleuMnY%2Bfb1fS1uZqpV76%2FnlxiX4wV%2Ft5TeZjanC5kgLmqXT7WixymhOjpp6CBSBdxy7qbpE%2FXMoizbBBhRwRLR0Kaiv1l0hhfD7WP8IX%2FUa5ENZ%2BfwWiRy5gY3%2BKVNfK8CO4oO9lvATY%2BpLz4Ywg6n1ZijEKVtv0Ga%2B7dLoaIa79ma3jurBYjRhMVr9%2BcU1KR7WA2p8WR%2BrUHQD5fkCr5uS0pJy2nZa1XmpvgYBXLO%2Bs6vmfablgxP%2BteKX5uA2Oz%2BgYwvKTHvQY6pgG%2FICIpbEfAoH0p%2BYSZYpYV326HlyPTDyQfeTIwxDukT2n5No7RNpfEJJBEFRhWHv8vMx5HWmzw02b9pjxmGCk3FbthyGScjj%2BAvFfg2QauD2eVtxojro%2B%2FBEndqEGGJ6hVDv%2BUSC8qKlq0H7HbTv%2FTi8sF6vXn%2BOFCU%2BABt%2Fx8g1azCs9DfUmPpalmjfBsl70dkF%2B%2Btzs03Oa8VO585DRl3U5eQML%2B&X-Amz-Signature=74f18de1199fd7789e085a22980c40daa7d055ceef388d59abc45d0fffcf4765&X-Amz-SignedHeaders=host&x-id=GetObject)","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81c0-bff5-d8269cfcf377","parent":"通常、より抽象的なクラスから、より具体的なクラスに継承をすることが多いです。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81f9-9612-c45d279850e8","parent":"例えば、RPGゲームを作ることを考えましょう。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-8107-bc46-c4e19fab5915","parent":"RPGゲームには様々な敵キャラクターがいます。例えば、スライムやゴブリン、ドラゴンなど。そして、敵キャラクターには共通する部分があるはずです。例えば、名前をもつことや、攻撃力やHPといったステータスを持つことや、ダメージを受けること、死ぬこと、など。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81ab-af56-f99e33062bdc","parent":"となると、`enemy`クラスという、敵キャラクター全体に共通する部分を書いたクラスをまず作り、その後に`slime`クラスや`goblin`クラスといった、個々の敵キャラクターのクラスを作る方が効率的に開発できます。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-8152-b531-f1d580292826","parent":"なぜなら、`enemy`クラスを継承した`slime`クラスや`goblin`クラスは、`enemy`クラスにある属性やメソッドをそのまま使えるからです。他の敵キャラクターを作るときも同じように効率的になります。","children":[]},{"type":"image","blockId":"16c2297f-7a72-817b-b4e3-c7b1649cfbce","parent":"![%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_10.30.16.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f9e367dd-1db7-428f-a2ed-c68a46952d5a/bb26be6b-cd2b-4d5b-a58d-b498e071f696/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_10.30.16.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB46632HGVP2P%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T151705Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEDQaCXVzLXdlc3QtMiJGMEQCIHzLf7ru%2BgT%2FSNuchaymY9RQpcSgiy8P4Ab8Z%2FkqZDYjAiAELtbMlGMGystP0DxF%2BU0cPx9MDZR3X3hkIG8os%2BBRfSr%2FAwhdEAAaDDYzNzQyMzE4MzgwNSIMFZNBhKDexPkLpRDQKtwDHew0RyCYJFFIRNboqEV4Dz3ENgivWItEZL8vyd6zxQOP%2BOU89QVibAop%2FR2rNmfhP7DDoAW%2BVdtSge6kkeHfarkboYh8HMCSLrrjleuqT949%2BUBNUntYrBipZdXH4k8iZMNiGy7qJN1%2BIrE%2BOaE%2BrEnWtAA%2B%2BN96fkIpqMM2IxbrMLDll53rbE4Ifa38go%2F%2FnJemgDJZay%2FBEcZrC%2BhbWUdHeXziUFpB7NPMFe6%2FBZYw0zGs5eFivli%2BmSuciazXQh5E7mMehhoA6q7Nm4lfD77QaswF2VJR5vLcy9%2Bf1p7%2FyRhrW1O0Ky4NexNjTWL6Wdst0BANGrlIKgS0um1v0Fk9VxfG7o9QX43Gx8Q%2FKn%2Ft0lTAke882GTleuMnY%2Bfb1fS1uZqpV76%2FnlxiX4wV%2Ft5TeZjanC5kgLmqXT7WixymhOjpp6CBSBdxy7qbpE%2FXMoizbBBhRwRLR0Kaiv1l0hhfD7WP8IX%2FUa5ENZ%2BfwWiRy5gY3%2BKVNfK8CO4oO9lvATY%2BpLz4Ywg6n1ZijEKVtv0Ga%2B7dLoaIa79ma3jurBYjRhMVr9%2BcU1KR7WA2p8WR%2BrUHQD5fkCr5uS0pJy2nZa1XmpvgYBXLO%2Bs6vmfablgxP%2BteKX5uA2Oz%2BgYwvKTHvQY6pgG%2FICIpbEfAoH0p%2BYSZYpYV326HlyPTDyQfeTIwxDukT2n5No7RNpfEJJBEFRhWHv8vMx5HWmzw02b9pjxmGCk3FbthyGScjj%2BAvFfg2QauD2eVtxojro%2B%2FBEndqEGGJ6hVDv%2BUSC8qKlq0H7HbTv%2FTi8sF6vXn%2BOFCU%2BABt%2Fx8g1azCs9DfUmPpalmjfBsl70dkF%2B%2Btzs03Oa8VO585DRl3U5eQML%2B&X-Amz-Signature=b2e525f141877b7e2d8adef7a56214bae84cf4b6630f2900a6eb629304d00e8a&X-Amz-SignedHeaders=host&x-id=GetObject)","children":[]},{"type":"heading_2","blockId":"16c2297f-7a72-817c-8432-c4b5a779a6c9","parent":"## クラスを継承する","children":[]},{"type":"divider","blockId":"16c2297f-7a72-8161-9d65-d5e7d0db3312","parent":"---","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-8151-aadf-d3771dd4d86f","parent":"それでは、実際にクラスを継承するコードを見ていきましょう。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81d4-a3b2-ddc7db8607c7","parent":"上記のRPGゲームの例でクラスを作ります。まず親クラスである`Enemy`クラスを作ります。","children":[]},{"type":"callout","blockId":"16c2297f-7a72-811e-b7a2-ebaf164e2420","parent":"> `Enemy`クラスの定義  \n> ```python  \n> class Enemy:  \n>     def __init__(self, name, hp, attack):  \n> \t\t    # 属性  \n>         self.name = name   \n>         self.hp = hp        \n>         self.attack = attack    \n>   \n>     def take_damage(self, damage):  \n>         # ダメージを受ける  \n>         self.hp -= damage  \n>         print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")  \n>         if self.hp <= 0:  \n>             self.die()  \n>   \n>     def die(self):  \n>         # 敵が倒された時  \n>         print(f\"{self.name} has been defeated!\")  \n> ```","children":[{"type":"code","blockId":"16c2297f-7a72-81de-9c4e-d2e37af4733b","parent":"```python\nclass Enemy:\n    def __init__(self, name, hp, attack):\n\t\t    # 属性\n        self.name = name \n        self.hp = hp      \n        self.attack = attack  \n\n    def take_damage(self, damage):\n        # ダメージを受ける\n        self.hp -= damage\n        print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")\n        if self.hp <= 0:\n            self.die()\n\n    def die(self):\n        # 敵が倒された時\n        print(f\"{self.name} has been defeated!\")\n```","children":[]}]},{"type":"paragraph","blockId":"16c2297f-7a72-8199-a0c5-c5c1fd909f8c","parent":"次に、`Enemy`クラスを継承して、`Slime`クラスを作ります。","children":[]},{"type":"callout","blockId":"16c2297f-7a72-8192-93a7-c98040c39632","parent":"> `Slime`クラスを定義  \n> ```python  \n> class Slime(Enemy):  \n> \tdef __init__(self, name=\"slime\", hp=10, attack=1):  \n> \t\t\tsuper().__init__(name, hp, attack)  \n> \t\t\t\t  \n> \t# 独自のメソッド（分裂）  \n> \tdef split(self):  \n> \t\t\tprint(f\"{self.name} split into two smaller slimes!\")  \n> ```","children":[{"type":"code","blockId":"16c2297f-7a72-8143-8110-de2547e1a6f3","parent":"```python\nclass Slime(Enemy):\n\tdef __init__(self, name=\"slime\", hp=10, attack=1):\n\t\t\tsuper().__init__(name, hp, attack)\n\t\t\t\t\n\t# 独自のメソッド（分裂）\n\tdef split(self):\n\t\t\tprint(f\"{self.name} split into two smaller slimes!\")\n```","children":[]}]},{"type":"paragraph","blockId":"16c2297f-7a72-81f7-8878-d6c2292f9032","parent":"クラスを継承する時は、`class クラス名(親クラス名):` と書きます。Slimeクラスは、Enemyクラスを継承するので、`class Slime(Enemy):`と書きます。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-8121-8c61-ca3edb128f60","parent":"`Slime`クラスのコンストラクタには、`super().__init__()`とあります。`super()`とは、親クラスのことを指します。つまり、`Enemy`クラスのことです。したがって、`super().__init__()`というのは、親クラス（`Enemy`クラス）のコンストラクタを呼び出しているということです。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-8114-99a5-f40cd836557a","parent":"`Slime`クラスのインスタンスを作成して動作させてみましょう。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81fb-b8f2-e0f3ef0388bd","parent":"この`Slime`クラスは、`Enemy`クラスを継承しているので、`Enemy`クラスの属性、メソッドを全て使えます。","children":[]},{"type":"callout","blockId":"16c2297f-7a72-81b1-bdb0-c96863b1996a","parent":"> `Slime`クラスのインスタンスを動作させる  \n> ```python  \n> # インスタンス作成  \n> slime1 = Slime()  \n>   \n> # スライムのステータスを出力  \n> print(f\"Name: {slime1.name}, HP: {slime1.hp}, Attack: {slime1.attack}\")  \n>   \n> # スライムがダメージを受ける  \n> slime1.take_damage(4)  \n>   \n> # スライムが分裂する  \n> slime1.split()  \n> ```","children":[{"type":"code","blockId":"16c2297f-7a72-81e5-8bf1-fef4d638ade5","parent":"```python\n# インスタンス作成\nslime1 = Slime()\n\n# スライムのステータスを出力\nprint(f\"Name: {slime1.name}, HP: {slime1.hp}, Attack: {slime1.attack}\")\n\n# スライムがダメージを受ける\nslime1.take_damage(4)\n\n# スライムが分裂する\nslime1.split()\n```","children":[]}]},{"type":"paragraph","blockId":"16c2297f-7a72-8103-b94d-d836e48ac519","parent":"まず`slime1`という名前でインスタンスを作成しています。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-8140-b394-cbc8e339ca7f","parent":"次に`slime1`の名前とステータスを出力しています。ここから親クラスの属性である`name`、`hp`、`attack`が引き継がれていることがわかります。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81e5-aa27-fc8de82ea95e","parent":"次に、`take_damage(4)`メソッドを使用して、スライムがダメージを受けます。これで、親クラスのメソッド`take_damage`を子クラスでも使えていることがわかります。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81d6-84a0-cf333e362b00","parent":"最後に、`Slime`クラスの独自のメソッドである`split`メソッドを使っています。","children":[]},{"type":"heading_2","blockId":"16c2297f-7a72-8100-b83e-eeb5b34798b8","parent":"## オーバーライド","children":[]},{"type":"divider","blockId":"16c2297f-7a72-81a4-8cce-ed2a9391dfd0","parent":"---","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81d2-8d4e-d491a1bbe921","parent":"子クラスは、親クラスのメソッドを書き換えることができます。メソッドを書き換えることを**オーバーライド**と呼びます。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-8109-8631-d2516197f883","parent":"例として、`Slime`クラスを、ダメージを受けると分裂するようにしてみましょう。","children":[]},{"type":"callout","blockId":"16c2297f-7a72-81a7-8cb8-c813532a6859","parent":"> `Slime`クラス  \n> ```python  \n> class Slime(Enemy):  \n> \tdef __init__(self, name=\"slime\", hp=10, attack=1):  \n> \t\t\tsuper().__init__(name, hp, attack)  \n> \t\t\t\t  \n> \t# 分裂  \n> \tdef split(self):  \n> \t\t\tprint(f\"{self.name} split into two smaller slimes!\")  \n> \t\t\t  \n> \t# オーバーライド  \n> \tdef take_damage(self, damage):  \n>         self.hp -= damage  \n>         print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")  \n>         if self.hp <= 0:  \n>             self.die()  \n>         else:  \n> \t\t        split()  \n> ```","children":[{"type":"code","blockId":"16c2297f-7a72-8140-bc26-d3f578ade01c","parent":"```python\nclass Slime(Enemy):\n\tdef __init__(self, name=\"slime\", hp=10, attack=1):\n\t\t\tsuper().__init__(name, hp, attack)\n\t\t\t\t\n\t# 分裂\n\tdef split(self):\n\t\t\tprint(f\"{self.name} split into two smaller slimes!\")\n\t\t\t\n\t# オーバーライド\n\tdef take_damage(self, damage):\n        self.hp -= damage\n        print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")\n        if self.hp <= 0:\n            self.die()\n        else:\n\t\t        split()\n```","children":[]}]},{"type":"paragraph","blockId":"16c2297f-7a72-8166-8755-e3de49caca64","parent":"これで、スライムは、ダメージを受けてHPが0でなければ`split`メソッドが実行され、分裂するようになりました。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81bc-80cd-dc7ec0834a77","parent":"このように、子クラスでは、親クラスのメソッドを書き換えることができます。","children":[]},{"type":"paragraph","blockId":"16c2297f-7a72-81a5-8d8b-d47ce0a37eaf","parent":"","children":[]}],"pageNavs":[{"title":"Home","id":"/posts"},{"title":"基礎班カリキュラム","id":"/posts/course/basic"},{"title":"後期","id":"/posts/course/後期/1"},{"title":"Python基礎文法 - 後期","id":"/posts/post/python-basic-2"},{"title":"クラスの継承","id":"/posts/post/python-basic-216c2297f-7a72-80aa-8f18-cca16f8b3361"}],"parentTitle":"Python基礎文法 - 後期","childNavs":[{"title":"import文","id":"16c2297f-7a72-80e6-9c8c-cfea39a9aee2","child":true},{"title":"クラスの継承","id":"16c2297f-7a72-80aa-8f18-cca16f8b3361","child":true},{"title":"文字列の中に変数を埋め込む","id":"16c2297f-7a72-80b7-b6f8-f38868675030","child":true},{"title":"lambda式","id":"16c2297f-7a72-8078-a47f-ea63c981db9b","child":true},{"title":"例外処理","id":"16c2297f-7a72-80b3-a867-f9e842f141de","child":true}],"slug":"python-basic-2","allTags":["Python","基礎班","Git","GitHub","Flet"]},"__N_SSG":true}