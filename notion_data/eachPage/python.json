[
  {
    "type": "child_page",
    "blockId": "19c0a16d-c518-8092-b2ba-ff51c425c7de",
    "parent": "## 1. Hello World!",
    "children": [
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8147-9acf-c77b88c546f5",
        "parent": "Pythonの学習の第一歩として、好きな言葉を画面に表示する方法を学びましょう。次のようなプログラムを書いてみましょう。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8116-b057-e57c6e132a5f",
        "parent": "```python\nprint(\"Hello World!\")\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81f5-9d14-c688d62dfbd2",
        "parent": "書けたら、保存（Ctrl + S）をして Run → Run Module（またはF5キー）で実行してみましょう。すると、以下のように「`Hello World!`」と新しい行に表示されます。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "19c0a16d-c518-811b-95a3-df9910016901",
        "parent": "![HelloWorld.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c57151a2-d4ad-4c5b-bbe7-f9a712f5fce3/984e284f-89fb-437c-8c5c-29a1e6c8e4a1/HelloWorld.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466WHYPHW56%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T083823Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC4aCXVzLXdlc3QtMiJHMEUCIQDfA95zsZbhiO4Lux6UU772X1pWkb9NjoSsBPq%2FY14YDgIgQoFUOBJ1FQjajC5YsYwnlx1RWVE3WBdrdLPZO6rDfO4q%2FwMIVxAAGgw2Mzc0MjMxODM4MDUiDEtpjtUnLstw6zfZxyrcAxNevGtybjyeQ1NY64rDV49LPEvSKw6fgxFKwW3oUDnb2U%2BTXQF9nEcW0BcboJQfIoDekh0xbnTZ7Ov21tSHdct9Zx7VUSJ5iWEqFvevw9ah7tA0AOhJA0yzZzKYXJ6za8ATh7KFanogB5nSOj40msUlRzm7e7dAwGDMd2HoY4kkpHOinKYMhRyjQR2kBeBaBvI5zv7I2hAxfdLEwhyMkUOsIml56oax%2BFlqPitBGrV%2BQ6CCPcePMiIcHB%2F2nSc8JsSYX82MhkVETkArVN1H19Fn%2B5sN7UYu%2B84UAVRXzoLNOYR%2BM66x5hDG%2FWeGdqHzSiH5bXB2%2BBqTKFsb4lMWD%2FJZw8ZTwYKntdZKiguiZHrin5tOTxGIv6RnscjDnqBSclQhGEzHvmNpuGJP5fYc%2FVg2O9clEh0rdBJH00QXNwB3PF5Noh7BSsy9f%2B%2Frql%2FX9nGOa9naeGUmNFOTxddQpBLYLS72J7oougKKCEkBXzzYSQlSm%2BuwnN%2FACuo5n15g2TaTE942KwDbmBlOWClzp7RN%2BlQtnHIFGkhjm4KrrNZJsNLF2SxjZKp3HJ85ajW2yu0g99fpG4SA5jajJAZi632442%2FleVFTwlrqdXvo1tW6wyoTFPV4SGRUODa8MOH9xb0GOqUBqLeKZJHkttT9GvY6Yn8xAs3Bm52pYfhGjUhyNlVDdsk3AZevCKg4%2F4pPWnhhMC0KycMqqkyCBb%2FbZy92lEvURHddW9XVkvpXhEPfJsdMjKufzyOY2AXGsuD46hFA7WPAhCmHGMfm%2FuWEcSFFbq%2FUG1PTZ%2BXvyX3dR3MsNA2PNzJCoa7Xt8eJN2F69NKk%2FvqfJNuljgdWLtIwRBbJa6rN8fokS1Cm&X-Amz-Signature=1191c58bfbcf0fb4fb6befa8b0ea7be7015be114b032a6bb1cdaf976dda972f9&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8151-b6b0-e1c3e8b064f9",
        "parent": "`Hello World!`の部分を別の言葉に変えてみましょう。例えば、",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-818b-92c5-cb79b7902212",
        "parent": "```python\nprint(\"Hello Horizon!\")\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81c6-a103-eb6d5c9ebf1b",
        "parent": "保存をして実行してみると、このように「`Hello Horizon!`」が表示されます。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "19c0a16d-c518-8144-9263-c9ee6677b433",
        "parent": "![HelloHorizon.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c57151a2-d4ad-4c5b-bbe7-f9a712f5fce3/1d99e9bb-e66b-4d97-ae01-d02fc0cb8806/HelloHorizon.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466WHYPHW56%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T083823Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC4aCXVzLXdlc3QtMiJHMEUCIQDfA95zsZbhiO4Lux6UU772X1pWkb9NjoSsBPq%2FY14YDgIgQoFUOBJ1FQjajC5YsYwnlx1RWVE3WBdrdLPZO6rDfO4q%2FwMIVxAAGgw2Mzc0MjMxODM4MDUiDEtpjtUnLstw6zfZxyrcAxNevGtybjyeQ1NY64rDV49LPEvSKw6fgxFKwW3oUDnb2U%2BTXQF9nEcW0BcboJQfIoDekh0xbnTZ7Ov21tSHdct9Zx7VUSJ5iWEqFvevw9ah7tA0AOhJA0yzZzKYXJ6za8ATh7KFanogB5nSOj40msUlRzm7e7dAwGDMd2HoY4kkpHOinKYMhRyjQR2kBeBaBvI5zv7I2hAxfdLEwhyMkUOsIml56oax%2BFlqPitBGrV%2BQ6CCPcePMiIcHB%2F2nSc8JsSYX82MhkVETkArVN1H19Fn%2B5sN7UYu%2B84UAVRXzoLNOYR%2BM66x5hDG%2FWeGdqHzSiH5bXB2%2BBqTKFsb4lMWD%2FJZw8ZTwYKntdZKiguiZHrin5tOTxGIv6RnscjDnqBSclQhGEzHvmNpuGJP5fYc%2FVg2O9clEh0rdBJH00QXNwB3PF5Noh7BSsy9f%2B%2Frql%2FX9nGOa9naeGUmNFOTxddQpBLYLS72J7oougKKCEkBXzzYSQlSm%2BuwnN%2FACuo5n15g2TaTE942KwDbmBlOWClzp7RN%2BlQtnHIFGkhjm4KrrNZJsNLF2SxjZKp3HJ85ajW2yu0g99fpG4SA5jajJAZi632442%2FleVFTwlrqdXvo1tW6wyoTFPV4SGRUODa8MOH9xb0GOqUBqLeKZJHkttT9GvY6Yn8xAs3Bm52pYfhGjUhyNlVDdsk3AZevCKg4%2F4pPWnhhMC0KycMqqkyCBb%2FbZy92lEvURHddW9XVkvpXhEPfJsdMjKufzyOY2AXGsuD46hFA7WPAhCmHGMfm%2FuWEcSFFbq%2FUG1PTZ%2BXvyX3dR3MsNA2PNzJCoa7Xt8eJN2F69NKk%2FvqfJNuljgdWLtIwRBbJa6rN8fokS1Cm&X-Amz-Signature=690e18884c6511ca0f571d99e49c1f7775728135a2551afc3fb9a55fb67990b5&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81c0-bc63-c2ad7028b7fd",
        "parent": "このように、任意の文字や言葉を画面に表示することをプログラミングでは**出力**といいます。つまり、一最初のプログラムは「Hello World!を出力した」と言う事ができます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81ca-b6fe-f9cd0c22f9d5",
        "parent": "また、今回`print`という言葉をプログラムに書いて出力をしました。これを **print関数** と呼びます。**print関数**は続く`()`の中に入っている言葉を出力する働きを持ちます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-814d-b3b3-e0288497a1de",
        "parent": "`()`の中身を様々な言葉に置き換えて、実行をしてみましょう。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8173-87d4-fbd8b1d8a4f9",
        "parent": "**プログラミングは実践あるのみです！**",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8171-96a0-c5c0c9d2ac6a",
        "parent": "",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8144-bab8-e0157312bb56",
        "parent": "ここで、これからプログラミングをしていくうえで一つ注意点です。それは、**プログラム上に全角文字**（→[全角と半角の違い](https://ruby-pc.com/hanzenkaku/)）**が存在してはいけない**ということです。以下のプログラムを見てみてください。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-810d-98fb-f18a9b5e2dff",
        "parent": "```python\nprint（\"Hello Horizon!\"）\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81c5-8dfa-f44a30a67e51",
        "parent": "見た目ではわかりにくいですが、このプログラムは`（` と `）`が全角文字になっています。これで実行をすると…",
        "children": []
      },
      {
        "type": "image",
        "blockId": "19c0a16d-c518-8188-9b36-dc3a48c07684",
        "parent": "![%E5%85%A8%E8%A7%92%E3%82%A8%E3%83%A9%E3%83%BC.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/c57151a2-d4ad-4c5b-bbe7-f9a712f5fce3/c4e0b6dd-8bab-455b-9017-a0889eb279e7/%E5%85%A8%E8%A7%92%E3%82%A8%E3%83%A9%E3%83%BC.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466WHYPHW56%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T083823Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC4aCXVzLXdlc3QtMiJHMEUCIQDfA95zsZbhiO4Lux6UU772X1pWkb9NjoSsBPq%2FY14YDgIgQoFUOBJ1FQjajC5YsYwnlx1RWVE3WBdrdLPZO6rDfO4q%2FwMIVxAAGgw2Mzc0MjMxODM4MDUiDEtpjtUnLstw6zfZxyrcAxNevGtybjyeQ1NY64rDV49LPEvSKw6fgxFKwW3oUDnb2U%2BTXQF9nEcW0BcboJQfIoDekh0xbnTZ7Ov21tSHdct9Zx7VUSJ5iWEqFvevw9ah7tA0AOhJA0yzZzKYXJ6za8ATh7KFanogB5nSOj40msUlRzm7e7dAwGDMd2HoY4kkpHOinKYMhRyjQR2kBeBaBvI5zv7I2hAxfdLEwhyMkUOsIml56oax%2BFlqPitBGrV%2BQ6CCPcePMiIcHB%2F2nSc8JsSYX82MhkVETkArVN1H19Fn%2B5sN7UYu%2B84UAVRXzoLNOYR%2BM66x5hDG%2FWeGdqHzSiH5bXB2%2BBqTKFsb4lMWD%2FJZw8ZTwYKntdZKiguiZHrin5tOTxGIv6RnscjDnqBSclQhGEzHvmNpuGJP5fYc%2FVg2O9clEh0rdBJH00QXNwB3PF5Noh7BSsy9f%2B%2Frql%2FX9nGOa9naeGUmNFOTxddQpBLYLS72J7oougKKCEkBXzzYSQlSm%2BuwnN%2FACuo5n15g2TaTE942KwDbmBlOWClzp7RN%2BlQtnHIFGkhjm4KrrNZJsNLF2SxjZKp3HJ85ajW2yu0g99fpG4SA5jajJAZi632442%2FleVFTwlrqdXvo1tW6wyoTFPV4SGRUODa8MOH9xb0GOqUBqLeKZJHkttT9GvY6Yn8xAs3Bm52pYfhGjUhyNlVDdsk3AZevCKg4%2F4pPWnhhMC0KycMqqkyCBb%2FbZy92lEvURHddW9XVkvpXhEPfJsdMjKufzyOY2AXGsuD46hFA7WPAhCmHGMfm%2FuWEcSFFbq%2FUG1PTZ%2BXvyX3dR3MsNA2PNzJCoa7Xt8eJN2F69NKk%2FvqfJNuljgdWLtIwRBbJa6rN8fokS1Cm&X-Amz-Signature=fae53024ca82c51cb290d10de1a142ea02c3e2d5591583af501823d546a8a8da&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8119-851c-fa9d0c881ae8",
        "parent": "このようなエラーが出ていしまいます。この他にも、全角の空白によってエラーが引き起こされることもあります。ぜひ意識してみてください。ただし、例外として ””（ダブルクオーテーション）で括られている中身には全角文字があっても問題ありません。\n　　↓ これはOK",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8174-a157-e91c2982d4df",
        "parent": "```python\nprint(\"こんにちは！\")\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8196-9d9b-f440fae976fb",
        "parent": "",
        "children": [
          {
            "type": "paragraph",
            "blockId": "19c0a16d-c518-81fc-85e7-f75295cc2bdc",
            "parent": "[次回(2.変数)](/eb0495b1874f460a86720c086bc8352d)",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8179-ade6-ef4a21d5fd19",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "child_page",
    "blockId": "19c0a16d-c518-804c-8fcd-e71bb1d7f8ae",
    "parent": "## 9. 文字列",
    "children": [
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81dc-bb87-d3882d7b52b0",
        "parent": "",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81fb-8e9e-de8fdb1f6639",
        "parent": "ここでは、これまで何度か触れてきた**文字列**に関してより詳しく学習します。文字列といえば、`”Hello World!”`とか`”Horizon”`とかですね",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-8158-ad90-da539cf9ddc6",
        "parent": "# ダブルクォートとシングルクォート",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8144-995a-f287779dff5c",
        "parent": "これまで、Pythonで文字列を作成するには、テキストを**ダブルクォート**（`\"\"`）で囲ってきました。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81e4-9c42-ca391cb5595c",
        "parent": "```python\nstr = \"Helllo World!\"\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81b7-95b7-cf0d9c47f76c",
        "parent": "Pythonでは同様のことが、**シングルクォート**（`''`）でも行えます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8173-9e91-ff989943bf5e",
        "parent": "```python\nstr = 'Helllo World!'\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81ad-a708-c03d04e5a7b6",
        "parent": "ダブルクォートとシングルクォートを組み合わせれば、文字列の中にダブルクォートまたはシングルクォートを入れることもできます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81f2-a693-f6462d99e366",
        "parent": "```python\nstr1 = \"Hello 'World'!\"\nstr2 = 'プログラミング部 \"Horizon\"'\nprint(str1)\nprint(str2)\n```",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81f5-b728-f7842c64412f",
        "parent": "```text\n＜出力結果＞\nHello 'World'!\nプログラミング部 \"Horizon\"\n```",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-813c-915d-c40f48069a5c",
        "parent": "# 結合",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8172-b6d0-fa3d16c0d2b6",
        "parent": "Pythonでの文字列は、**結合**（複数の文字列を繋げる処理）がとても簡単です。足し算のように`+`で文字列の結合を行うことができます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8123-9e5f-f50516b0d08c",
        "parent": "```python\na = \"Hello\"\nb = \"World!\"\nstr = a + b\nprint(str)\n```",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81bb-8cd1-f6a5f15a1972",
        "parent": "```text\n＜出力結果＞\nHelloWorld!\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8189-9d9a-f154ea959af8",
        "parent": "これによって、文字列を含む文章を出力しようと思ったとき、これまでは`print(”あなたの名前は”, name, “です”)`のようにカンマで区切っていましたが、以下のように一つの変数にまとめてから出力ができるようになります。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8165-9c6e-f6102bcac33e",
        "parent": "```python\nname = input(\"あなたの名前を入力してください；\")\nmassage = \"あなたの名前は\" + name + \"です\"\nprint(massage)\n```",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81f4-8ed7-fcfc2c915b29",
        "parent": "```text\n＜出力結果＞\nあなたの名前を入力してください；Haruto\nあなたの名前はHarutoです\n```",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-813e-a685-d4bcd6824b25",
        "parent": "# リストとの類似点",
        "children": []
      },
      {
        "type": "heading_3",
        "blockId": "19c0a16d-c518-81ba-ad4f-d665607ea836",
        "parent": "### インデックスによる指定",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8179-bbdd-f9c0529db62f",
        "parent": "文字列はリストと同じように、インデックスを使って特定の一文字を取り出すことができます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81f7-97fa-eacd79e4e4cf",
        "parent": "```python\nstr = 'Horizon'\nprint(str[0])   #strの0番目（最初）\nprint(str[3])   #strの3番目\nprint(str[-1])  #strの最後\n```",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81eb-92b4-c18852916175",
        "parent": "```text\n＜出力結果＞\nH\ni\nn\n```",
        "children": []
      },
      {
        "type": "heading_3",
        "blockId": "19c0a16d-c518-8155-b040-f02773e8cf7a",
        "parent": "### スライス",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8185-8d22-fdc581c45872",
        "parent": "リストで行ったのと同じように、文字列も**スライス**を行うことができます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81f5-b83b-c0ec01fae96e",
        "parent": "```python\nsliced_str = str[x:y]\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81fd-95ea-fd986929668e",
        "parent": "このようにすることで、最初の文字を0文字目とした`str`の **x文字目** ～ **y-1文字目** までを抜き出すことができます。例えば、**「Hello World!」**から**「World」**のみを抜き出すには、次のようなプログラムになります。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-814d-80c0-cdbd2f2d4748",
        "parent": "```python\nstr = 'Hello World!'\nsliced_str = str[6:11]\nprint(sliced_str)\n```",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-814f-b7d9-fbbee8b0cfb8",
        "parent": "```text\n＜出力結果＞\nWorld\n```",
        "children": []
      },
      {
        "type": "heading_3",
        "blockId": "19c0a16d-c518-81f2-9d1f-d50f1ddf409a",
        "parent": "### for文との組み合わせ",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81db-abf9-c9d3d68a50c4",
        "parent": "文字列はfor文と組み合わせると、文字列から位置文字ずつ取り出して処理を行うことができます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-810e-bc24-c6a6159ffc09",
        "parent": "```python\nstr = 'Horizon'\nfor char in str:\n    print(char)\n```",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81e4-83b2-d5d9a0b23cf3",
        "parent": "```text\n＜出力結果＞\nH\no\nr\ni\nz\no\nn\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-813c-8109-f62abfdf3a9e",
        "parent": "",
        "children": [
          {
            "type": "paragraph",
            "blockId": "19c0a16d-c518-81e3-858a-dacf18e40424",
            "parent": "",
            "children": []
          }
        ]
      }
    ]
  },
  {
    "type": "child_page",
    "blockId": "19c0a16d-c518-80c2-9084-fa69f56e2626",
    "parent": "## 10. 関数とは",
    "children": [
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8154-a79a-f52654c75686",
        "parent": "今回はプログラミングを行う上でとても重要な、**関数**について学びます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8122-99a2-c9ea466346b7",
        "parent": "これまでも**print関数**や**input関数**など、さまざまな関数を使用してきましたが、**プログラミングにおける関数とはどんなものか？**までは扱って来ませんでした。プログラミングをしていくうえでは必要な知識となるため、詳しく解説していきます。",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-81e9-ab73-d89a1aea42b1",
        "parent": "# 関数",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81b2-ac14-d20f5c5bf843",
        "parent": "関数とは、いわば**特定の処理に特化した仕事人**です。材料を渡せば、その材料をもとに特定の処理を行い、その処理で得られた成果物を返してきてくれます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81ae-ae4b-d2310a5de71e",
        "parent": "たとえば、足し算を行うadditionという関数（→**仕事人**）があるとします。この仕事人additionは、**足す数**と**足される数**という二つの**材料**を足し合わせて、答えという**成果物**を返してくれます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81a1-9000-d7dfbf221f80",
        "parent": "```python\n  ↓ここに答え（成果物）が入る\nanswer = addtion(5, 7)\n                 ↑  ↑二つの材料　\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81f7-8aa9-d20e6ee2a34a",
        "parent": "プログラミングでは、この材料を**引数（ひきすう）**と呼び、成果物を**戻り値（もどりち）**と呼びます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "19c0a16d-c518-8159-b10f-ca28b79e3a87",
        "parent": "> ☝ **戻り値**は**返り値**とも言います。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-814b-92d9-e5a83ebe2c25",
        "parent": "また、関数を実行することを**「関数を呼び出す」**と言ったりします。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "19c0a16d-c518-814e-a8af-c4549a0102a9",
        "parent": "![%E9%96%A2%E6%95%B0%E8%AA%AC%E6%98%8E.jpg](https://prod-files-secure.s3.us-west-2.amazonaws.com/c57151a2-d4ad-4c5b-bbe7-f9a712f5fce3/44ae266a-224c-4af4-8692-77ec00939fc9/%E9%96%A2%E6%95%B0%E8%AA%AC%E6%98%8E.jpg?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466SOSSTIJA%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T083824Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC4aCXVzLXdlc3QtMiJGMEQCIBg%2F3%2FGpqUdBJ5a8WH6R7gRJiwX7JRIGy0iH%2BbZ2%2FH3eAiAz59io42udDWLqAB5JACNwxdOj0CwJuBBktSuF2ppFSir%2FAwhXEAAaDDYzNzQyMzE4MzgwNSIMHOsCwQydicKYI5Y5KtwDiLXZ3%2FhM%2BWIVi9CQN7gT2ZVAxNfyUUqgaMofy%2BmQNgrzOAFqrEyGk7y1wGw%2Fhe3V5XBLIriuz9X5KLnuefi%2B%2BL%2B1YVFeA4mnF3%2Bry8HmHuqmWbUk5W93nV6xUpU%2FCL7JSWBZ1BNUUSwchpuxPF7lrt0zItl97lelCnGfedUIbfekGaJoW2tA1qz3vw2Wael1B4SmwBMwAKbkHYrDRhf8wsdIIJOpdMudgdOvdakq4WlTMQgfs1sJXPA8blwpsVgZ7lBJHTq5aUXmUfXJitE3Y%2FYeyyhla9Ca3nrU0dFkPa0NDnCHTFtPOBIoXXofdx8V20L%2Fib2rkN%2BkKGk%2F6qYOo2EGBTc8zjmFObVzVHcLTfQnJ8M8rsg2PPE579ulDInejGMUbPsR66zNVL%2Fk8rlrk%2B9K0DR34%2FzNV6EF6%2BqsNFH5u9aZPDYeH4hM4lgOAut11nFmVJXmu2%2FdUV%2FK4fItFMgM03h4qL1bFMLrsz1kBtZYJ10v3LKuuGnpmhAUHTKfjlzjgFBL0tnTmzYzBrHQC96v8Dy5FQLexD%2Bi2JdbmRaeGqyrf1MA4laderJyQQqmRpaMh%2BHFJFBpSi5eVWeyvxWueht%2Fd5X%2BQSOb9etqlOVV9HotAF1tpYm8dHMwqf7FvQY6pgHsgYFGqnPJ6kWJV3vuxjAroqbc3oOFwfzvI54pHRp7bxZ3BwxAcnWQ5jl2NMtLkbij%2FpwFAFGN0qV6nS%2FHCmrrOnEzDUkX1mqGf%2B%2Ff%2F8SnPUUO1oD6cifJHU0uYR0BtOtjAx6tuqn4X8zBEhvtGloOB9Vvn0ugIjM0ZdBKcNivxvw6mKPLxmVv2gKdmPJg7JpbedwUlFSD%2FFuhyxtIQD4VtJZwlYEP&X-Amz-Signature=4e7c344b834913d278af5cf0f3cb4fe3bb355c165d4c98e9c147634784e63394&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-81ff-84e3-e84eef4282af",
        "parent": "```python\n  ↓ここに**戻り値**が入る\nanswer = addtion(5, 7)\n                 ↑  ↑二つの**引数**\n```",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "19c0a16d-c518-8147-a875-e176b07679f8",
        "parent": "> ⚠️ このaddition関数は標準のPythonでは実行できません",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81d3-895a-ccf3dddab826",
        "parent": "これまで使用してきたもので言えば、例えばinput関数は…",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8168-ab94-c78f9ee87c07",
        "parent": "```python\nn = input(\"年齢を入力してください：\")\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-816f-a1ea-d82a85b781aa",
        "parent": "`\"年齢を入力してください：\"`という**引数（材料）**を画面に表示させたあと、ユーザーが入力した値を**戻り値（成果物）**として返しています。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-812d-b8e2-d567b8689800",
        "parent": "int関数では…",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-816a-921c-f416a70e4921",
        "parent": "```python\na = int(\"1\")\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-81ca-b924-fea8f384930e",
        "parent": "`\"1\"`という文字列を**引数（材料）**として受け取り、それを整数型に変換したものを**戻り値（成果物）**として返しています。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "19c0a16d-c518-81fc-8188-fe0d3fe66819",
        "parent": "> ❗ 関数の中には**引数**と**戻り値**のいずれか、またはその両方を**必要としないもの**も存在します。",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-8157-9196-dded2c16fc5f",
        "parent": "# Pythonの組み込み関数",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-814e-8b0b-d2d9f1d02b86",
        "parent": "Pythonに標準で組み込まれている代表的な関数を紹介します。",
        "children": []
      },
      {
        "type": "table",
        "blockId": "19c0a16d-c518-8125-bb35-d58db3b04723",
        "parent": "| **関数名**       | **説明**                 | **使用例**                                                              |\n| ------------- | ---------------------- | -------------------------------------------------------------------- |\n| **`abs()`**   | 絶対値を返す                 | **`abs(-5)`** **=>** **`5`**                                         |\n| **`len()`**   | シーケンス（リストや文字列など）の長さを返す | **`len(\"Python\")`** **=>** **`6`**\n**`lne([1,2,3])`** **=>** **`3`** |\n| **`max()`**   | シーケンスの最大値を返す           | **`max([1,2,3])`** **=>** **`3`**                                    |\n| **`min()`**   | シーケンスの最小値を返す           | **`min([1,2,3])`** **=>** **`1`**                                    |\n| **`sum()`**   | シーケンスの合計値を返す           | **`sum([1,2,3])`** **=>** **`6`**                                    |\n| **`round()`** | 数値を最も近い整数に丸める(四捨五入)    | **`round(3.5)`** **=>** **`4`**                                      |",
        "children": [
          {
            "type": "table_row",
            "blockId": "19c0a16d-c518-81d9-a463-d2f16f58706b",
            "parent": "",
            "children": []
          },
          {
            "type": "table_row",
            "blockId": "19c0a16d-c518-8177-99a6-ec9b276f5a52",
            "parent": "",
            "children": []
          },
          {
            "type": "table_row",
            "blockId": "19c0a16d-c518-811c-bf59-d0eaec3a9ab4",
            "parent": "",
            "children": []
          },
          {
            "type": "table_row",
            "blockId": "19c0a16d-c518-81cf-b6a2-f21e5b91bef4",
            "parent": "",
            "children": []
          },
          {
            "type": "table_row",
            "blockId": "19c0a16d-c518-8193-9d20-cca10c9a66f4",
            "parent": "",
            "children": []
          },
          {
            "type": "table_row",
            "blockId": "19c0a16d-c518-81f8-9b3a-d066abf1cb79",
            "parent": "",
            "children": []
          },
          {
            "type": "table_row",
            "blockId": "19c0a16d-c518-81f6-b8e8-e936ca0258d8",
            "parent": "",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8184-92d5-e36e3353570a",
        "parent": "次回からはこのような関数を自作する方法を学びます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-813e-b379-cf7de52f6233",
        "parent": "",
        "children": [
          {
            "type": "paragraph",
            "blockId": "19c0a16d-c518-816a-8cad-d1cc02ccf9d1",
            "parent": "[前回（９.文字列）](/19c0a16dc518804c8fcde71bb1d7f8ae)　|　[次回(11.関数を作ろう!)](/19c0a16dc51880bb8105c8e7f0f10b12)",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-802e-8854-c39528793481",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "child_page",
    "blockId": "19c0a16d-c518-80bb-8105-c8e7f0f10b12",
    "parent": "## 11. 関数を作ろう！",
    "children": [
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8040-80c2-e361000b1215",
        "parent": "[前章](/a5f061e5235b45778e34e827e1427d89)で解説した**関数**は、実は自分で作ることもできます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-803c-a5e6-fc0d9f369fbe",
        "parent": "関数を自作すれば、複雑な処理もいちいち書くことなく関数を呼び出すだけで完結するので、プログラムの規模が大きくなってくると非常に便利です。",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-8092-aa4d-ff4b9d85167c",
        "parent": "# 関数の利点",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "19c0a16d-c518-8046-b9a5-d96faa88d080",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8006-9607-ee749c14eda3",
        "parent": "例えば、「ユーザーの名前を入力してもらい、その名前を『あなたの名前は {名前} です』の形で出力する」という一連の処理があったとします。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-80c5-a1d7-c16c74655bed",
        "parent": "```python\nname = input(\"あなたの名前を入力してください；\")\nmassage = \"あなたの名前は\" + name + \"です\"\nprint(massage)\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80fc-97b0-fecc5304cf88",
        "parent": "この処理を実行するのが一度や二度だけならそのたびに書けば良いので問題ありません。しかし、1つにプログラム中でこの処理を何十回も書かなければいけなくなると、たった3行の処理といえど記述が大変です。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-802d-aeaa-ee523010655c",
        "parent": "では、この処理を**たった1行で済ませる**ことができれば、少しは負担が減るのではないでしょうか？",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80b4-acb4-fdf37cd9e178",
        "parent": "それを実現できるのが**関数の自作**です。",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-80a9-a6b4-e9ad89ab8db9",
        "parent": "# インデント",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "19c0a16d-c518-80bd-8e64-c7ede5e98a50",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-807c-84f2-cce652ae40f1",
        "parent": "早速**関数の自作**に関して紹介をしていきたいところですが、その前に…",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-806b-9936-f1838ddc93f3",
        "parent": "Pythonを学習するうえで特に重要な概念となる、**インデント**について説明をします。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8088-9f63-e1a34fdcc25c",
        "parent": "**インデント**とは、別名**字下げ**ともよばれ、行頭を後ろにズラすことです。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-80d7-9938-e76ed8bbe6f7",
        "parent": "```python\nn = 10        # この行はインデントされていません。\n\nif n > 5:     # この行はインデントされていません。\n\tprint(\"nは5より大きいです。\")     # この行はインデントされています。\nelse:         # この行はインデントされていません。\n\tprint(\"nは5よりです。\")          # この行はインデントされています。\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8047-8a54-ea991707e86f",
        "parent": "このインデントは、基本的に「Tab」キーを押して行います。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80c0-b20a-ea58b910f150",
        "parent": "エディタを開いて、何度か「Tab」キーを押してみてください。一定間隔で空白が入っていくと思います。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-807d-a184-d0662087b2ac",
        "parent": "行頭にこのタブを入れることを**インデント**というのです。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-802a-b8b5-cca75684cf16",
        "parent": "実は、Pythonではこの**インデント**がとても重要なのです。Pythonではこのインデントを使って**ブロック**を形作るのです。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "19c0a16d-c518-809e-97d9-f0a566ed50f9",
        "parent": "## ブロック",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "19c0a16d-c518-80f9-9ec7-d060f04f8947",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8057-b2f2-dfbc9f301e92",
        "parent": "**ブロック**とは、処理のかたまりを定義する単位です。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80b2-9651-e731d710fdaf",
        "parent": "このブロックを使って、`if文`で条件に当てはまるときに実行する処理や、`for文`で繰り返す処理を定義するのです。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8004-9a83-e13dad5f4611",
        "parent": "次の画像を見てください。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "19c0a16d-c518-80ef-b990-f4e439e176d0",
        "parent": "![%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E8%AA%AC%E6%98%8E1.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c57151a2-d4ad-4c5b-bbe7-f9a712f5fce3/ff5f43f3-5845-45a5-b05a-159c0858b65c/%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E8%AA%AC%E6%98%8E1.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMAQDBLQ%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T083826Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC4aCXVzLXdlc3QtMiJGMEQCIEHypWdde9Att3iw4aZ6EAhrJwWOFkKjQntH4LlTWA15AiAuNFftlEzH8rR6dA9TxZGVxcSKMev9Mp%2BT4PKKQm3drir%2FAwhXEAAaDDYzNzQyMzE4MzgwNSIM%2FYoqLCXIcaBcWgRQKtwD7lqEYGS3TYfqmuwDtUfnkJfVWJeqHzfSnMOaLdQYHabiaWdEHM%2FItXDBKS%2FjLl6NK5hHUqEWmnhNcbaY6wopjKglnAKV3bK2M5f5gYpvjI6Rv5ht2EPX6BjLL8UbvEije74Ml0309VvxsnsB8WIGAYZguWwK%2FYzZDuI4boELkivoWaScnKRY5B5woHOUfmYMUc1Npv5g8N3VrS7JmGBraUzm45AIhcdn7DZwMxyhuOhXDbthB44HOY%2Fp6182A1NvYPhcjrGV%2F25lIUaUt13Qc74WrVuJlMnFl3GzlJNvYmWUOuHAXuroT1fATuYYdT%2BnSuSFGcmYY9BvbAxAGacAkaGj8jB1EcZ5gBZJt9Tfd1zTtGT63UL3Oo8LcY5IQYatTPuDKK9cxFRtNW65vJLFq1fK0af0aILmg%2Fca38E1wyLIl1QsyhWoIM9dE5fMQSxIG40q9cHwXssWmv3rjAW%2FIzzMFu5tlvfoxTW5lOweoOYkf0euGdedrWVB%2Fr3GZscDPpu5gUAGvdRwdDuXkMLXiTPgjjiVqP10OH7bOA%2BMIOI3snBCN07ws4qIciuc2T4Zyu2XXBlFYpFlTEC0rcpaS%2FdwG3t19p%2FsAJ%2BqjLFnFZzdFo4O9IOQ0UDyP88wgf7FvQY6pgFLMyNXb1fnwWNpbGvJTxVaeR9b6G0Q0LBpniEWsrO9z2HMrYaG%2Bc5RmhT8VdpL%2Bvb61J9qnzGomUlA0q9WzobxdlA4O%2FS7v1JAiZcF7HWim49faqvzyKha1TIg9VznOm9A0aYCAiaLEWhMM7y85Iv%2Bv9fHGYrVbIrX7T6aMfBt6QcnWvnBBi%2Fo%2FDA5KvaqDvH%2BuLDFnE%2BXBqQOaybfDyaZU%2F7ZCL3X&X-Amz-Signature=fb9657a3835dff251f94558ef38fe9884638d6eae46f2eb929d308f10e5625d9&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80d9-aad8-c125263e7f24",
        "parent": "このように、インデントによって各`if文`や`for文`によって実行される処理を明確化しています。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80fe-b16c-f1a5b10bc80e",
        "parent": "また、このブロックの中には、さらにブロックを入れてより高度な処理を行うこともできます。以下の例を見てください。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "19c0a16d-c518-8014-80e3-f32f3a683e6c",
        "parent": "![%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E8%AA%AC%E6%98%8E2.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c57151a2-d4ad-4c5b-bbe7-f9a712f5fce3/21a3b75d-94e9-49b0-bcc6-470d59557359/%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E8%AA%AC%E6%98%8E2.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMAQDBLQ%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T083826Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC4aCXVzLXdlc3QtMiJGMEQCIEHypWdde9Att3iw4aZ6EAhrJwWOFkKjQntH4LlTWA15AiAuNFftlEzH8rR6dA9TxZGVxcSKMev9Mp%2BT4PKKQm3drir%2FAwhXEAAaDDYzNzQyMzE4MzgwNSIM%2FYoqLCXIcaBcWgRQKtwD7lqEYGS3TYfqmuwDtUfnkJfVWJeqHzfSnMOaLdQYHabiaWdEHM%2FItXDBKS%2FjLl6NK5hHUqEWmnhNcbaY6wopjKglnAKV3bK2M5f5gYpvjI6Rv5ht2EPX6BjLL8UbvEije74Ml0309VvxsnsB8WIGAYZguWwK%2FYzZDuI4boELkivoWaScnKRY5B5woHOUfmYMUc1Npv5g8N3VrS7JmGBraUzm45AIhcdn7DZwMxyhuOhXDbthB44HOY%2Fp6182A1NvYPhcjrGV%2F25lIUaUt13Qc74WrVuJlMnFl3GzlJNvYmWUOuHAXuroT1fATuYYdT%2BnSuSFGcmYY9BvbAxAGacAkaGj8jB1EcZ5gBZJt9Tfd1zTtGT63UL3Oo8LcY5IQYatTPuDKK9cxFRtNW65vJLFq1fK0af0aILmg%2Fca38E1wyLIl1QsyhWoIM9dE5fMQSxIG40q9cHwXssWmv3rjAW%2FIzzMFu5tlvfoxTW5lOweoOYkf0euGdedrWVB%2Fr3GZscDPpu5gUAGvdRwdDuXkMLXiTPgjjiVqP10OH7bOA%2BMIOI3snBCN07ws4qIciuc2T4Zyu2XXBlFYpFlTEC0rcpaS%2FdwG3t19p%2FsAJ%2BqjLFnFZzdFo4O9IOQ0UDyP88wgf7FvQY6pgFLMyNXb1fnwWNpbGvJTxVaeR9b6G0Q0LBpniEWsrO9z2HMrYaG%2Bc5RmhT8VdpL%2Bvb61J9qnzGomUlA0q9WzobxdlA4O%2FS7v1JAiZcF7HWim49faqvzyKha1TIg9VznOm9A0aYCAiaLEWhMM7y85Iv%2Bv9fHGYrVbIrX7T6aMfBt6QcnWvnBBi%2Fo%2FDA5KvaqDvH%2BuLDFnE%2BXBqQOaybfDyaZU%2F7ZCL3X&X-Amz-Signature=a565ea695a567e0bee4b17c3903e2780fb7ea7c2589774ca575c796ca828c705&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80c6-86f0-e944728e2ff7",
        "parent": "この例では、`for文`に属するブロックの中に、`if文`に属するブロックが入っています。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80c8-be96-c030717aa85a",
        "parent": "",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80ec-ae2e-fab3f96c0412",
        "parent": "また、`if文`や`for文`の下などのインデントが必要な部分にインデントを入れないと、以下のようなエラーが起こって実行ができなくなってしまいます。気をつけましょう！",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-809a-a737-dd8f11e01bc7",
        "parent": "```python\n# インデントを入れ忘れたプログラム\nn = 10\n\nif n > 5:\nprint(\"nは5より大きいです。\")\nelse:\nprint(\"nは5よりです。\")\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8042-a5ea-e9465fd36e9d",
        "parent": "**インデントを入れ忘れたことによるエラー文**",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-80b4-892f-db22e1977e00",
        "parent": "```text\n  File \"Main.py\", line 5\n    print(\"nは5より大きいです。\")\n    ^\nIndentationError: expected an indented block after 'if' statement on line 4\n```",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-80dd-90d8-e786b61cf91f",
        "parent": "# 関数の自作",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "19c0a16d-c518-80b3-8ca3-db99f4b8375e",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-801e-a8db-e331ff8d2b2d",
        "parent": "関数は以下のように記述することで作成ができます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8016-9360-e1dec7690385",
        "parent": "```python\ndef 関数の名前():\n    関数を呼び出したときに行う処理\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-804d-8ef2-d97eed20cce7",
        "parent": "[上記](/19c0a16dc51880bb8105c8e7f0f10b12)の名前のプログラムを関数にしようとすると、以下のようになります。これを**関数の宣言**と呼びます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-800a-8b5d-da3a7834815e",
        "parent": "```python\ndef print_your_name():\n    name = input(\"あなたの名前を入力してください；\")\n    massage = \"あなたの名前は\" + name + \"です\"\n    print(massage)\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80e0-87ac-ddfd4b896966",
        "parent": "この関数で実行される範囲も、先述のインデントで**ブロック**を作って定義します。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "19c0a16d-c518-8077-9621-c565e6b94949",
        "parent": "![%E9%96%A2%E6%95%B0%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E7%94%BB%E5%83%8F.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/c57151a2-d4ad-4c5b-bbe7-f9a712f5fce3/6848a678-86e1-49dc-b0aa-fcece24999af/%E9%96%A2%E6%95%B0%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E7%94%BB%E5%83%8F.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466UMAQDBLQ%2F20250216%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250216T083826Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEC4aCXVzLXdlc3QtMiJGMEQCIEHypWdde9Att3iw4aZ6EAhrJwWOFkKjQntH4LlTWA15AiAuNFftlEzH8rR6dA9TxZGVxcSKMev9Mp%2BT4PKKQm3drir%2FAwhXEAAaDDYzNzQyMzE4MzgwNSIM%2FYoqLCXIcaBcWgRQKtwD7lqEYGS3TYfqmuwDtUfnkJfVWJeqHzfSnMOaLdQYHabiaWdEHM%2FItXDBKS%2FjLl6NK5hHUqEWmnhNcbaY6wopjKglnAKV3bK2M5f5gYpvjI6Rv5ht2EPX6BjLL8UbvEije74Ml0309VvxsnsB8WIGAYZguWwK%2FYzZDuI4boELkivoWaScnKRY5B5woHOUfmYMUc1Npv5g8N3VrS7JmGBraUzm45AIhcdn7DZwMxyhuOhXDbthB44HOY%2Fp6182A1NvYPhcjrGV%2F25lIUaUt13Qc74WrVuJlMnFl3GzlJNvYmWUOuHAXuroT1fATuYYdT%2BnSuSFGcmYY9BvbAxAGacAkaGj8jB1EcZ5gBZJt9Tfd1zTtGT63UL3Oo8LcY5IQYatTPuDKK9cxFRtNW65vJLFq1fK0af0aILmg%2Fca38E1wyLIl1QsyhWoIM9dE5fMQSxIG40q9cHwXssWmv3rjAW%2FIzzMFu5tlvfoxTW5lOweoOYkf0euGdedrWVB%2Fr3GZscDPpu5gUAGvdRwdDuXkMLXiTPgjjiVqP10OH7bOA%2BMIOI3snBCN07ws4qIciuc2T4Zyu2XXBlFYpFlTEC0rcpaS%2FdwG3t19p%2FsAJ%2BqjLFnFZzdFo4O9IOQ0UDyP88wgf7FvQY6pgFLMyNXb1fnwWNpbGvJTxVaeR9b6G0Q0LBpniEWsrO9z2HMrYaG%2Bc5RmhT8VdpL%2Bvb61J9qnzGomUlA0q9WzobxdlA4O%2FS7v1JAiZcF7HWim49faqvzyKha1TIg9VznOm9A0aYCAiaLEWhMM7y85Iv%2Bv9fHGYrVbIrX7T6aMfBt6QcnWvnBBi%2Fo%2FDA5KvaqDvH%2BuLDFnE%2BXBqQOaybfDyaZU%2F7ZCL3X&X-Amz-Signature=1531af34d03b0b2b282b0a505805780a609c5d568cb3b48c8baac1eece12a6bd&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80c4-bf06-e718ef1edee0",
        "parent": "この関数を実行するには、関数を宣言したのと同じファイル内で、`print_your_name()`を呼び出します。試しに、3回連続で呼び出してみましょう。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-80eb-a616-d3942076a9af",
        "parent": "```python\ndef print_your_name():\n    name = input(\"あなたの名前を入力してください；\")\n    massage = \"あなたの名前は\" + name + \"です\"\n    print(massage)\n\nprint_your_name()\nprint_your_name()\nprint_your_name()\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8009-ac98-ce7de21439ad",
        "parent": "するとこのように、「名前を入力してもらい、表示する」という一連の処理が3回連続で実行されました。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8024-85ab-d9c7015986fd",
        "parent": "```text\nあなたの名前を入力してください；Tanaka\nあなたの名前はTanakaです\nあなたの名前を入力してください；Sato\nあなたの名前はSatoです\nあなたの名前を入力してください；Nishiura\nあなたの名前はNishiuraです\n```",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-801e-b8c6-cd8ff4cf6aaa",
        "parent": "# 引数を受け取る関数",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "19c0a16d-c518-8039-afe2-e28943424229",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-807b-b167-db63ee33b8cf",
        "parent": "先程の`print_your_name()`関数は、引数も戻り値もない関数でした。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-806d-b7de-f7466908a298",
        "parent": "```python\n↓戻り値がない\n print_your_name()\n                ↑引数もない\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8045-b15f-ecc8fabbc2e4",
        "parent": "引数を受け取って、その引数をもとに処理を行う関数を作りたいときは、次のように書きます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8034-b227-f414e132f126",
        "parent": "```python\ndef 関数の名前(引数を受け取る変数):\n    関数を呼び出したときに行う処理\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80ac-a3ea-c64faed35f00",
        "parent": "[引数も戻り値もない関数](/19c0a16dc51880bb8105c8e7f0f10b12)から増えた部分は、「**引数を受け取る変数**」です。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8042-a9c1-f880f11ac7b8",
        "parent": "例えば、「三角形の底辺と高さを受け取り、その面積を求めて表示する」という処理内容の関数を作るときには、以下のように書きます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-80fe-8d16-f5255983f675",
        "parent": "```python\ndef find_triangle_area(tei, taka):  #受け取った底辺と高さを変数 tei と taka とする\n    area = tei * taka / 2\n    print(\"底辺\" + str(tei) + \"、高さ\" + str(taka) + \"の三角形の面積は\" + str(area) + \"です\")\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-80c8-a79c-c07ca9f55870",
        "parent": "この関数を実行するには、以下のように書きます。底辺が3、高さが5だとすると…",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-80ce-b501-e11203f00c38",
        "parent": "```python\nfind_triangle_area(3, 5)\n\t\t\t\t\t\t\t\t\t ↑  ↑ この二つが引数！\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8002-a2ae-ce3b57e68492",
        "parent": "こうすることで、`find_triangle_area()`関数の **引数を受け取る変数** である`tei`に3、`taka`に5が格納され、関数の中身が実行されます。よって、実行結果は以下のようになります。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8044-9e72-c4c0071bdbba",
        "parent": "```text\n底辺3、高さ5の三角形の面積は7.5です\n```",
        "children": []
      },
      {
        "type": "heading_1",
        "blockId": "19c0a16d-c518-806a-b3f1-d5f2e148afef",
        "parent": "# 戻り値を返す関数",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "19c0a16d-c518-80c0-a61c-f559069ea364",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8054-a5af-fd3118b9ee71",
        "parent": "さらに、戻り値を返す関数の作成方法も紹介します。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8020-86e4-c7f2e7556af5",
        "parent": "```python\ndef 関数の名前(引数を受け取る変数):\n    関数を呼び出したときに行う処理\n    return 戻り値として返したい値\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-809a-a174-e32a390d3029",
        "parent": "**引数を受け取る関数**から増えた部分は「**return 戻り値として返したい値**」ですね。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8025-995f-dfd70090151e",
        "parent": "先程の[三角形の面積を求めて表示する関数](/19c0a16dc51880bb8105c8e7f0f10b12)を、「三角形の面積を求め、面積を戻り値として返す関数」に作り変えると、以下のようになります。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-800a-87df-dff0d44d8e53",
        "parent": "```python\ndef find_triangle_area(tei, taka):  #受け取った底辺と高さを変数 tei と taka とする\n    area = tei * taka / 2\n    return area     #変数 area を戻り値として返す\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-8032-a2fc-f4f415a792f7",
        "parent": "この関数を実行し、結果をprint関数で表示するには以下のようになります。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "19c0a16d-c518-8055-b383-fddc1c3937d2",
        "parent": "```python\ndef find_triangle_area(tei, taka):\n    area = tei * taka / 2\n    return area\n\ntriangle_area = find_triangle_area(5, 3)\nprint(triangle_area)\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "19c0a16d-c518-806e-93cf-e3e843852af5",
        "parent": "これにより、find_triangle_area関数は受け取った底辺と高さをもとに三角形の面積を求め、その結果を戻り値として変数triangle_areaに代入するという働きをしてくれます。",
        "children": []
      }
    ]
  }
]