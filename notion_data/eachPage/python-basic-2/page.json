[
  {
    "type": "heading_2",
    "blockId": "16c2297f-7a72-80bf-afdf-f82178c0c404",
    "parent": "## カリキュラム",
    "children": []
  },
  {
    "type": "divider",
    "blockId": "16c2297f-7a72-80a3-988e-c0fed5e3bfe2",
    "parent": "---",
    "children": []
  },
  {
    "type": "child_page",
    "blockId": "16c2297f-7a72-80e6-9c8c-cfea39a9aee2",
    "parent": "## import文",
    "children": [
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81db-b7e4-e1ec67e15aaa",
        "parent": "ほとんどの場合、Pythonでコードを書くと、一番はじめに行う命令は`import`です。今回はこの`import`が何を行なっているのか、どのように使うのかを学んでいきます。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-8191-8b55-c1b71dbd4569",
        "parent": "## import文とは",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-810f-a25d-dabd22fc8936",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81ef-883d-fdcb41d41f66",
        "parent": "**結論から言うと、「モジュール」をそのファイル内で使えるようにするための命令です。**",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81ab-835f-edf66bf71f1f",
        "parent": "と言われてもあまりピンとこないと思いますので、順番に説明していきます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-816b-a2e4-ea0d17d50aea",
        "parent": "pythonで言う「モジュール」とは、関数やクラスなどが定義されたpythonファイルのことです。ですので、「モジュールをそのファイル内で使えるようにする」というのは、つまり、他のpythonのファイルで定義された関数やクラスなどを、import文で呼び出したファイル内で使えるようにするということです。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8136-9e33-e1e08b1b99cf",
        "parent": "> import文の書き方  \n> ```python  \n> import モジュール名  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81f0-bb1f-db0f1a42550b",
            "parent": "```python\nimport モジュール名\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-811a-9710-e5182f226c9d",
        "parent": "例えば、みなさんにお馴染みのモジュールといえば**Flet**が挙げられます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-812c-a4c2-ce763cb057fc",
        "parent": "> import文の例  \n> ```python  \n> import flet as ft  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8199-8ef0-d7798988580e",
            "parent": "```python\nimport flet as ft\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-813b-9255-e7055e48ba3d",
        "parent": "このように書くことで、fletというモジュール（pythonファイル）を呼び出しているわけです。これによって、みなさんは、fletモジュール内で定義された関数やクラスを使えて、アプリを簡単に開発できるのです。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-814f-b219-dc346d2c546a",
        "parent": "`import flet` の後ろにある`as ft` は、fletというモジュールの呼称を定めているコードです。これによって、fletモジュールを`ft`という名前で使用できます。\n呼び出したモジュールの関数やクラスを使用するには、`モジュール名.関数名`や`モジュール名.クラス名` というように、呼び出した関数やクラスの前にモジュール名をつける必要があります。`as ft`と言うのは、このモジュール名を`ft`にしていると言うわけです。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8147-94d2-fa34b0350095",
        "parent": "したがって、例えば、`ft.Text()` と言うのは、fletモジュールの中で定義されている`Text`と言うクラスを使用しているわけです。**Flet**を使って開発するときに、やたらと`ft.` と書くのは、このように、使用するクラスや関数がfletモジュール内で定義されていることを明示するためです。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-816a-9ade-caceb166af3a",
        "parent": "## 自分で作成したモジュールを呼び出す",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-81b3-960c-f6c2d97ea402",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81f0-8b77-e2a5a8527e69",
        "parent": "上述した通り、import文はモジュール（他のpythonファイル）を呼び出す命令です。Fletは他の人が開発したモジュールでしたが、みなさんも自分のpythonファイルで関数やクラスを定義することができますよね。import文を使うと、あるファイルで定義した関数やクラスを、別のあるファイルで使用することができるようになります。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81f7-ba30-dca47a47ee3e",
        "parent": "例えば、以下のようにscript.pyで定義した関数を、main.pyで呼び出して使用することができます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8125-924f-e1826eba481b",
        "parent": "> script.py  \n> ```python  \n> def add_number(a,b):  \n> \treturn a + b  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8133-b337-df32e0e37542",
            "parent": "```python\ndef add_number(a,b):\n\treturn a + b\n```",
            "children": []
          }
        ]
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8119-a7be-f86c00575c9e",
        "parent": "> main.py  \n> ```python  \n> import script  \n>   \n> print(script.add_number(4,5))  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81e1-8b35-f3d27ce8dbab",
            "parent": "```python\nimport script\n\nprint(script.add_number(4,5))\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81b6-bb1d-fd94fe582152",
        "parent": "main.pyを実行すると、`9` と出力され、script.pyで定義された関数を使用できることがわかります。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8151-9fac-ef8c0c9d9ce4",
        "parent": "このように、import文を使うことによって、複数のファイルを使って開発をすることができるようになります。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8188-9071-d347819ec6a9",
        "parent": "> 💡 **複数のファイルを使って開発することのメリット**  \n> 複数のファイルを使って開発をすることによって、一つのファイルにコードを詰め込まなくてよくなり、コードの可読性が向上します。また、汎用的な関数やクラスをそれぞれのファイルに分けて定義しておくことで、再度ゼロからコードを書く必要がなくなり、開発効率が劇的によくなります。ですので、開発をする上で、複数のファイルに役割を分けることはかなり重要だと言えます。",
        "children": [
          {
            "type": "paragraph",
            "blockId": "16c2297f-7a72-811d-b478-e3c4ef599690",
            "parent": "複数のファイルを使って開発をすることによって、一つのファイルにコードを詰め込まなくてよくなり、コードの可読性が向上します。また、汎用的な関数やクラスをそれぞれのファイルに分けて定義しておくことで、再度ゼロからコードを書く必要がなくなり、開発効率が劇的によくなります。ですので、開発をする上で、複数のファイルに役割を分けることはかなり重要だと言えます。",
            "children": []
          }
        ]
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-81c5-a759-c4a534ce09f5",
        "parent": "## from文",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-81b8-abd5-d32f45bd81c0",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81d9-8a06-ea8af226b5c7",
        "parent": "import文を使って、他のファイルで定義されている関数を使用する場合、以下のように書くのでしたね。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81f5-a5ed-df5e0c1c87e7",
        "parent": "> 他のファイルで定義された関数を使用する  \n> ```python  \n> import script  \n>   \n> print(script.add_number(4,5))  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8168-9355-e90236106294",
            "parent": "```python\nimport script\n\nprint(script.add_number(4,5))\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81e1-ace8-fdb048afee56",
        "parent": "このように他のファイルの関数を使用するには、`モジュール名.関数名` と、関数の前にモジュール名をつける必要があります。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81bd-a223-c6cb246600bd",
        "parent": "しかし、その関数を何度も使う場合、モジュール名を毎回つけるのは面倒に感じるかもしれません。そのような時には、**from文**を使って、モジュール内の関数やクラスを単体で呼び出しましょう。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-815b-9dc7-e7d02110fe68",
        "parent": "> from文の書き方  \n> ```python  \n> from モジュール名 import クラス名もしくは関数名  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81f0-9b25-e735ac68bc59",
            "parent": "```python\nfrom モジュール名 import クラス名もしくは関数名\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8118-b9d9-d576f0ffcf54",
        "parent": "先ほどのscriptファイルから関数を呼び出すとすれば以下のようになります。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-816f-acb8-fdec0ceed4fa",
        "parent": "> from文の例  \n> ```python  \n> from script import add_number  \n>   \n> print(add_number(4,5))  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81f6-80e2-e7b308fd5b12",
            "parent": "```python\nfrom script import add_number\n\nprint(add_number(4,5))\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8154-b5fb-c0b60f3d7536",
        "parent": "このようにfrom文を使うことによって、関数やクラス単体を呼び出すことができ、呼び出した関数やクラスを使用する時にモジュール名を書かずにそのまま使えます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81e5-95e7-f80d63e34452",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "child_page",
    "blockId": "16c2297f-7a72-80aa-8f18-cca16f8b3361",
    "parent": "## クラスの継承",
    "children": [
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81cc-ae10-f615027777b5",
        "parent": "今回はクラスの継承について紹介します。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81ab-9193-fe93473369ad",
        "parent": "なお、このページは前期カリキュラム「[**１２.クラス**](/17d2297f7a72807c8ce6deb2ca7a16d6)」に載っている知識が前提となっています。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-81d8-977c-c8d1f517f51e",
        "parent": "## 継承の概要",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-8194-a2af-df00f5691a4f",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-814c-b5fb-cc2edb58a0a3",
        "parent": "クラスの**継承**は、**既存のクラスの属性とメソッドを引き継いで新しいクラスを作る仕組み**です。これにより、コードを再利用しやすくなり、共通の機能をもつ親クラスにまとめて管理することができます。親クラスを継承したクラスを子クラスと呼びます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-814a-98d6-ed72d80a2159",
        "parent": "ちなみに、親クラスは基底クラスやスーパークラスとも呼ばれ、子クラスは派生クラスやサブクラスとも呼ばれます。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "16c2297f-7a72-810a-8f23-c62ebd2f82e0",
        "parent": "![%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-20_15.37.20.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f9e367dd-1db7-428f-a2ed-c68a46952d5a/f5968834-beab-4ebc-9dfa-94e8ccb26276/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-20_15.37.20.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466TAIWUSYC%2F20250217%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250217T062650Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEEYaCXVzLXdlc3QtMiJHMEUCIHMLN2v%2BF8UDS3xhj%2FT3G6V4o%2BlPSPsCsbRinnxHBHeCAiEAo21IpUhzgxHDR2GOIBvVOmhPoL%2F32Znq3WiD1sy6EZgq%2FwMIbxAAGgw2Mzc0MjMxODM4MDUiDGcnqM9ecJ09hcfbfSrcA2w1x7vwikJ9ANwsRYnzmYckTqg3PyxGbxwsv5UEGzF7Zeu13IarR4yy7rnp6sZ5bo6QS1p4QYk%2BtnV%2FfyaLCHsjQ0lF%2F3Wzn2A4TBwrfpq7L6c9wBXFxqDXFz8VsRuaP7Pcy%2FZJmiNgbB5%2B3mqLFDrNnubXx1ZbaNs%2FfAdRJQmEPYOTcQtMMYy5Gw8dmDP5G%2FwQBBn3v2GK%2FlCtL8blHfcK3gRHGJHe6UFN8Fg8ktxBRbuN4TPSvUn0vjisR280lAHhjhHOXu0fSI6myrMvNtuIvlrNVtlnwCpeFgnNGtfIDT0%2B6yhwHL%2FIJg3P%2Fw64WtXEPcE5wBlO%2ByZtce4ZXWCpUc9TNoBzkZRJh6eNmWBjPgHxRYhGySqWkiqGTfT0%2FcHScuGHcaoUun1ET6dP8oPM0chW2f9YoNMd%2F9ZPszA5MAgi2n2pvT81fzLuuOrjp7bsIBlmEbGID5GDqDZSJ6MCTou5lbHOCF9EtszFHNEF04fdJMUvaFgABULaH55MrMeCcZZK2n8066xZ9xCru5H6nbrNkrQ4ToUSm75ym%2FVqoNRjZSkrNnXIBy3GIeCK%2FeCMp%2Br2BHBLITK9hV5glUXp2K4vgXB34rsdshQ95JmeVAjeA1ZOuCKfOPwUMO%2BUy70GOqUBaQeEa2K8QIQAmf0GC42u8VZz%2B8iAw4fw5MjRlawTu3ew2moqAeyxFaBk1IVZQwthGwNSEr5GNmuhHp%2F0TGR6mmTOJQrUSM1bMNlj7Rqa4c3YuV%2Blr%2FAkg9LMxjb12PkqmT98iwA9%2BTiZ8eW0fPsm6%2F6BoguncjrInIvvLX6IlItN%2Bgbq%2FLipm1PL4mWtOdNmAiDWkzpeY3gBtV%2Fpar1n4KORriV%2F&X-Amz-Signature=f89766d4bab579e5cc55751298648985cee55fe84591c68359f4eaf40d0fcff3&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81f2-b3b9-e1ddbae35f46",
        "parent": "継承すると、子クラスは親クラスの属性やメソッドを全て使える状態になります。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81de-8173-f510afbeb3c5",
        "parent": "子クラスは、親クラスから引き継いだ上で、属性やメソッドを追加したり、メソッドを書き換えたりすることができます。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "16c2297f-7a72-8161-adb3-c9e2b77a54c2",
        "parent": "![%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_9.50.39.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f9e367dd-1db7-428f-a2ed-c68a46952d5a/ca535bb9-ff5f-4005-94a4-f7b7e5adfca1/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_9.50.39.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466TAIWUSYC%2F20250217%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250217T062650Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEEYaCXVzLXdlc3QtMiJHMEUCIHMLN2v%2BF8UDS3xhj%2FT3G6V4o%2BlPSPsCsbRinnxHBHeCAiEAo21IpUhzgxHDR2GOIBvVOmhPoL%2F32Znq3WiD1sy6EZgq%2FwMIbxAAGgw2Mzc0MjMxODM4MDUiDGcnqM9ecJ09hcfbfSrcA2w1x7vwikJ9ANwsRYnzmYckTqg3PyxGbxwsv5UEGzF7Zeu13IarR4yy7rnp6sZ5bo6QS1p4QYk%2BtnV%2FfyaLCHsjQ0lF%2F3Wzn2A4TBwrfpq7L6c9wBXFxqDXFz8VsRuaP7Pcy%2FZJmiNgbB5%2B3mqLFDrNnubXx1ZbaNs%2FfAdRJQmEPYOTcQtMMYy5Gw8dmDP5G%2FwQBBn3v2GK%2FlCtL8blHfcK3gRHGJHe6UFN8Fg8ktxBRbuN4TPSvUn0vjisR280lAHhjhHOXu0fSI6myrMvNtuIvlrNVtlnwCpeFgnNGtfIDT0%2B6yhwHL%2FIJg3P%2Fw64WtXEPcE5wBlO%2ByZtce4ZXWCpUc9TNoBzkZRJh6eNmWBjPgHxRYhGySqWkiqGTfT0%2FcHScuGHcaoUun1ET6dP8oPM0chW2f9YoNMd%2F9ZPszA5MAgi2n2pvT81fzLuuOrjp7bsIBlmEbGID5GDqDZSJ6MCTou5lbHOCF9EtszFHNEF04fdJMUvaFgABULaH55MrMeCcZZK2n8066xZ9xCru5H6nbrNkrQ4ToUSm75ym%2FVqoNRjZSkrNnXIBy3GIeCK%2FeCMp%2Br2BHBLITK9hV5glUXp2K4vgXB34rsdshQ95JmeVAjeA1ZOuCKfOPwUMO%2BUy70GOqUBaQeEa2K8QIQAmf0GC42u8VZz%2B8iAw4fw5MjRlawTu3ew2moqAeyxFaBk1IVZQwthGwNSEr5GNmuhHp%2F0TGR6mmTOJQrUSM1bMNlj7Rqa4c3YuV%2Blr%2FAkg9LMxjb12PkqmT98iwA9%2BTiZ8eW0fPsm6%2F6BoguncjrInIvvLX6IlItN%2Bgbq%2FLipm1PL4mWtOdNmAiDWkzpeY3gBtV%2Fpar1n4KORriV%2F&X-Amz-Signature=9b6495acc20ba00861450bdf26ce501b99739f4282522ebe793c339853bfd9c9&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81c0-bff5-d8269cfcf377",
        "parent": "通常、より抽象的なクラスから、より具体的なクラスに継承をすることが多いです。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81f9-9612-c45d279850e8",
        "parent": "例えば、RPGゲームを作ることを考えましょう。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8107-bc46-c4e19fab5915",
        "parent": "RPGゲームには様々な敵キャラクターがいます。例えば、スライムやゴブリン、ドラゴンなど。そして、敵キャラクターには共通する部分があるはずです。例えば、名前をもつことや、攻撃力やHPといったステータスを持つことや、ダメージを受けること、死ぬこと、など。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81ab-af56-f99e33062bdc",
        "parent": "となると、`enemy`クラスという、敵キャラクター全体に共通する部分を書いたクラスをまず作り、その後に`slime`クラスや`goblin`クラスといった、個々の敵キャラクターのクラスを作る方が効率的に開発できます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8152-b531-f1d580292826",
        "parent": "なぜなら、`enemy`クラスを継承した`slime`クラスや`goblin`クラスは、`enemy`クラスにある属性やメソッドをそのまま使えるからです。他の敵キャラクターを作るときも同じように効率的になります。",
        "children": []
      },
      {
        "type": "image",
        "blockId": "16c2297f-7a72-817b-b4e3-c7b1649cfbce",
        "parent": "![%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_10.30.16.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/f9e367dd-1db7-428f-a2ed-c68a46952d5a/bb26be6b-cd2b-4d5b-a58d-b498e071f696/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88_2024-11-21_10.30.16.png?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=ASIAZI2LB466TAIWUSYC%2F20250217%2Fus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20250217T062650Z&X-Amz-Expires=3600&X-Amz-Security-Token=IQoJb3JpZ2luX2VjEEYaCXVzLXdlc3QtMiJHMEUCIHMLN2v%2BF8UDS3xhj%2FT3G6V4o%2BlPSPsCsbRinnxHBHeCAiEAo21IpUhzgxHDR2GOIBvVOmhPoL%2F32Znq3WiD1sy6EZgq%2FwMIbxAAGgw2Mzc0MjMxODM4MDUiDGcnqM9ecJ09hcfbfSrcA2w1x7vwikJ9ANwsRYnzmYckTqg3PyxGbxwsv5UEGzF7Zeu13IarR4yy7rnp6sZ5bo6QS1p4QYk%2BtnV%2FfyaLCHsjQ0lF%2F3Wzn2A4TBwrfpq7L6c9wBXFxqDXFz8VsRuaP7Pcy%2FZJmiNgbB5%2B3mqLFDrNnubXx1ZbaNs%2FfAdRJQmEPYOTcQtMMYy5Gw8dmDP5G%2FwQBBn3v2GK%2FlCtL8blHfcK3gRHGJHe6UFN8Fg8ktxBRbuN4TPSvUn0vjisR280lAHhjhHOXu0fSI6myrMvNtuIvlrNVtlnwCpeFgnNGtfIDT0%2B6yhwHL%2FIJg3P%2Fw64WtXEPcE5wBlO%2ByZtce4ZXWCpUc9TNoBzkZRJh6eNmWBjPgHxRYhGySqWkiqGTfT0%2FcHScuGHcaoUun1ET6dP8oPM0chW2f9YoNMd%2F9ZPszA5MAgi2n2pvT81fzLuuOrjp7bsIBlmEbGID5GDqDZSJ6MCTou5lbHOCF9EtszFHNEF04fdJMUvaFgABULaH55MrMeCcZZK2n8066xZ9xCru5H6nbrNkrQ4ToUSm75ym%2FVqoNRjZSkrNnXIBy3GIeCK%2FeCMp%2Br2BHBLITK9hV5glUXp2K4vgXB34rsdshQ95JmeVAjeA1ZOuCKfOPwUMO%2BUy70GOqUBaQeEa2K8QIQAmf0GC42u8VZz%2B8iAw4fw5MjRlawTu3ew2moqAeyxFaBk1IVZQwthGwNSEr5GNmuhHp%2F0TGR6mmTOJQrUSM1bMNlj7Rqa4c3YuV%2Blr%2FAkg9LMxjb12PkqmT98iwA9%2BTiZ8eW0fPsm6%2F6BoguncjrInIvvLX6IlItN%2Bgbq%2FLipm1PL4mWtOdNmAiDWkzpeY3gBtV%2Fpar1n4KORriV%2F&X-Amz-Signature=7bce87bd7b02b2e8553d8259fabd121590c4746cbb1d7a3050a365bb6d987458&X-Amz-SignedHeaders=host&x-id=GetObject)",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-817c-8432-c4b5a779a6c9",
        "parent": "## クラスを継承する",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-8161-9d65-d5e7d0db3312",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8151-aadf-d3771dd4d86f",
        "parent": "それでは、実際にクラスを継承するコードを見ていきましょう。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81d4-a3b2-ddc7db8607c7",
        "parent": "上記のRPGゲームの例でクラスを作ります。まず親クラスである`Enemy`クラスを作ります。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-811e-b7a2-ebaf164e2420",
        "parent": "> `Enemy`クラスの定義  \n> ```python  \n> class Enemy:  \n>     def __init__(self, name, hp, attack):  \n> \t\t    # 属性  \n>         self.name = name   \n>         self.hp = hp        \n>         self.attack = attack    \n>   \n>     def take_damage(self, damage):  \n>         # ダメージを受ける  \n>         self.hp -= damage  \n>         print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")  \n>         if self.hp <= 0:  \n>             self.die()  \n>   \n>     def die(self):  \n>         # 敵が倒された時  \n>         print(f\"{self.name} has been defeated!\")  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81de-9c4e-d2e37af4733b",
            "parent": "```python\nclass Enemy:\n    def __init__(self, name, hp, attack):\n\t\t    # 属性\n        self.name = name \n        self.hp = hp      \n        self.attack = attack  \n\n    def take_damage(self, damage):\n        # ダメージを受ける\n        self.hp -= damage\n        print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")\n        if self.hp <= 0:\n            self.die()\n\n    def die(self):\n        # 敵が倒された時\n        print(f\"{self.name} has been defeated!\")\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8199-a0c5-c5c1fd909f8c",
        "parent": "次に、`Enemy`クラスを継承して、`Slime`クラスを作ります。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8192-93a7-c98040c39632",
        "parent": "> `Slime`クラスを定義  \n> ```python  \n> class Slime(Enemy):  \n> \tdef __init__(self, name=\"slime\", hp=10, attack=1):  \n> \t\t\tsuper().__init__(name, hp, attack)  \n> \t\t\t\t  \n> \t# 独自のメソッド（分裂）  \n> \tdef split(self):  \n> \t\t\tprint(f\"{self.name} split into two smaller slimes!\")  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8143-8110-de2547e1a6f3",
            "parent": "```python\nclass Slime(Enemy):\n\tdef __init__(self, name=\"slime\", hp=10, attack=1):\n\t\t\tsuper().__init__(name, hp, attack)\n\t\t\t\t\n\t# 独自のメソッド（分裂）\n\tdef split(self):\n\t\t\tprint(f\"{self.name} split into two smaller slimes!\")\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81f7-8878-d6c2292f9032",
        "parent": "クラスを継承する時は、`class クラス名(親クラス名):` と書きます。Slimeクラスは、Enemyクラスを継承するので、`class Slime(Enemy):`と書きます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8121-8c61-ca3edb128f60",
        "parent": "`Slime`クラスのコンストラクタには、`super().__init__()`とあります。`super()`とは、親クラスのことを指します。つまり、`Enemy`クラスのことです。したがって、`super().__init__()`というのは、親クラス（`Enemy`クラス）のコンストラクタを呼び出しているということです。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8114-99a5-f40cd836557a",
        "parent": "`Slime`クラスのインスタンスを作成して動作させてみましょう。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81fb-b8f2-e0f3ef0388bd",
        "parent": "この`Slime`クラスは、`Enemy`クラスを継承しているので、`Enemy`クラスの属性、メソッドを全て使えます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81b1-bdb0-c96863b1996a",
        "parent": "> `Slime`クラスのインスタンスを動作させる  \n> ```python  \n> # インスタンス作成  \n> slime1 = Slime()  \n>   \n> # スライムのステータスを出力  \n> print(f\"Name: {slime1.name}, HP: {slime1.hp}, Attack: {slime1.attack}\")  \n>   \n> # スライムがダメージを受ける  \n> slime1.take_damage(4)  \n>   \n> # スライムが分裂する  \n> slime1.split()  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81e5-8bf1-fef4d638ade5",
            "parent": "```python\n# インスタンス作成\nslime1 = Slime()\n\n# スライムのステータスを出力\nprint(f\"Name: {slime1.name}, HP: {slime1.hp}, Attack: {slime1.attack}\")\n\n# スライムがダメージを受ける\nslime1.take_damage(4)\n\n# スライムが分裂する\nslime1.split()\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8103-b94d-d836e48ac519",
        "parent": "まず`slime1`という名前でインスタンスを作成しています。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8140-b394-cbc8e339ca7f",
        "parent": "次に`slime1`の名前とステータスを出力しています。ここから親クラスの属性である`name`、`hp`、`attack`が引き継がれていることがわかります。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81e5-aa27-fc8de82ea95e",
        "parent": "次に、`take_damage(4)`メソッドを使用して、スライムがダメージを受けます。これで、親クラスのメソッド`take_damage`を子クラスでも使えていることがわかります。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81d6-84a0-cf333e362b00",
        "parent": "最後に、`Slime`クラスの独自のメソッドである`split`メソッドを使っています。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-8100-b83e-eeb5b34798b8",
        "parent": "## オーバーライド",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-81a4-8cce-ed2a9391dfd0",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81d2-8d4e-d491a1bbe921",
        "parent": "子クラスは、親クラスのメソッドを書き換えることができます。メソッドを書き換えることを**オーバーライド**と呼びます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8109-8631-d2516197f883",
        "parent": "例として、`Slime`クラスを、ダメージを受けると分裂するようにしてみましょう。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81a7-8cb8-c813532a6859",
        "parent": "> `Slime`クラス  \n> ```python  \n> class Slime(Enemy):  \n> \tdef __init__(self, name=\"slime\", hp=10, attack=1):  \n> \t\t\tsuper().__init__(name, hp, attack)  \n> \t\t\t\t  \n> \t# 分裂  \n> \tdef split(self):  \n> \t\t\tprint(f\"{self.name} split into two smaller slimes!\")  \n> \t\t\t  \n> \t# オーバーライド  \n> \tdef take_damage(self, damage):  \n>         self.hp -= damage  \n>         print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")  \n>         if self.hp <= 0:  \n>             self.die()  \n>         else:  \n> \t\t        split()  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8140-bc26-d3f578ade01c",
            "parent": "```python\nclass Slime(Enemy):\n\tdef __init__(self, name=\"slime\", hp=10, attack=1):\n\t\t\tsuper().__init__(name, hp, attack)\n\t\t\t\t\n\t# 分裂\n\tdef split(self):\n\t\t\tprint(f\"{self.name} split into two smaller slimes!\")\n\t\t\t\n\t# オーバーライド\n\tdef take_damage(self, damage):\n        self.hp -= damage\n        print(f\"{self.name} took {damage} damage! HP is now {self.hp}.\")\n        if self.hp <= 0:\n            self.die()\n        else:\n\t\t        split()\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8166-8755-e3de49caca64",
        "parent": "これで、スライムは、ダメージを受けてHPが0でなければ`split`メソッドが実行され、分裂するようになりました。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81bc-80cd-dc7ec0834a77",
        "parent": "このように、子クラスでは、親クラスのメソッドを書き換えることができます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81a5-8d8b-d47ce0a37eaf",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "child_page",
    "blockId": "16c2297f-7a72-80b7-b6f8-f38868675030",
    "parent": "## 文字列の中に変数を埋め込む",
    "children": [
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81d6-b858-c089eb04110f",
        "parent": "今回は、pythonで、文字列の中に変数を埋め込む方法を説明します。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-81a5-be30-f15b49fe7300",
        "parent": "## 文字列の中に変数を埋め込む方法",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-8105-98da-d075ee2cafa1",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81e0-827b-cfdf75165034",
        "parent": "文字列の中に変数を埋め込む方法を説明します。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8158-8e20-dc4c187b3f3a",
        "parent": "例えば、動的なメッセージを表示したい場面を考えましょう。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-817a-b682-dcab897f8915",
        "parent": "そのようなとき、一つの方法として、以下のように文字列と変数を連結する方法が考えられます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81f2-9d0a-c0bea7828a61",
        "parent": "> 文字列と変数を連結する  \n> ```python  \n> name = \"tanaka\"  \n> print(name + \"さん、こんにちは\")  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81d0-b37a-ea507603709c",
            "parent": "```python\nname = \"tanaka\"\nprint(name + \"さん、こんにちは\")\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8125-8047-d6b4d00aec9a",
        "parent": "このように文字列を連結することで動的なメッセージを表示できます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-810a-9bb0-f803246f88de",
        "parent": "しかし、他にも文字列の中に変数を埋め込むという方法があります。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-811e-ad60-d6387e7888d0",
        "parent": "> ### 文字列の中に変数を埋め込む  \n>   \n> ```python  \n> name = \"tanaka\"  \n> print(f\"{name}さん、こんにちは\")  \n> ```",
        "children": [
          {
            "type": "heading_3",
            "blockId": "16c2297f-7a72-817e-8b89-ce1297832261",
            "parent": "### 文字列の中に変数を埋め込む",
            "children": []
          },
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8176-8f85-f957ea0a8bbb",
            "parent": "```python\nname = \"tanaka\"\nprint(f\"{name}さん、こんにちは\")\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8132-8262-f9b2b01c440a",
        "parent": "このように、クォーテーション（`”`または`’`）の前に`f`をつけ、変数を`{}`で囲むと、文字列の中に変数を埋め込むことができます。",
        "children": []
      },
      {
        "type": "code",
        "blockId": "16c2297f-7a72-8104-80c4-ee6bff2caf87",
        "parent": "```python\nf\"{変数}さん、こんにちは\"\n```",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-810f-bb5b-d4340f8497b9",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "child_page",
    "blockId": "16c2297f-7a72-8078-a47f-ea63c981db9b",
    "parent": "## lambda式",
    "children": [
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81dd-92ca-c37bb79a1cd5",
        "parent": "今回はpythonの`lambda`式について説明します。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-8170-bdd1-c278dedf2ecc",
        "parent": "## lambda式の基本",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-8106-96ee-fb1308c998ea",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-816b-b9a8-f17e62284c06",
        "parent": "`lambda`式は、関数を作るための短縮記法です。通常の関数定義と異なり、`lambda`式は一行で書け、関数名を省略することができます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81f5-a40b-ced203f85dc3",
        "parent": "> 基本構文  \n> ```python  \n> lambda 引数:処理内容  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81fe-b293-cf6bc434a48f",
            "parent": "```python\nlambda 引数:処理内容\n```",
            "children": []
          }
        ]
      },
      {
        "type": "bulleted_list_item",
        "blockId": "16c2297f-7a72-8129-93eb-e6e275884e51",
        "parent": "- **引数**: 関数に渡す引数。",
        "children": []
      },
      {
        "type": "bulleted_list_item",
        "blockId": "16c2297f-7a72-81bb-9f50-cf59aad56e4e",
        "parent": "- **式**: 関数が返す結果（通常、1つの式のみ）。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8167-b7bb-f7576a7a4543",
        "parent": "引数がない場合は引数の部分に`_`（アンダーバー）を使います",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81f2-81b4-e9ae1be8b92b",
        "parent": "> 引数がない場合  \n> ```python  \n> lambda _:処理内容  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-810a-924f-e27d5ba51bb0",
            "parent": "```python\nlambda _:処理内容\n```",
            "children": []
          }
        ]
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-81c2-8779-c0e0a81da4a6",
        "parent": "## 使用例",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-81fa-a050-cf77fcbc8ece",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8124-8e5f-ca35e4a74a18",
        "parent": "lambda式の具体的な使用例を示します。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-810e-843b-d86afac2bbc0",
        "parent": "> 2つの引数を受け取って、その和を返す関数  \n> ```python  \n> add = lambda x, y: x + y  \n> print(add(3, 5))  # 8  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-810a-9d7f-c8b659b551e8",
            "parent": "```python\nadd = lambda x, y: x + y\nprint(add(3, 5))  # 8\n```",
            "children": []
          }
        ]
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8183-bc27-ec1f4d862208",
        "parent": "> リスト内の各要素を2倍にする関数  \n> ```python  \n> nums = [1, 2, 3, 4]  \n> doubled = list(map(lambda x: x * 2, nums))  \n> print(doubled)  # [2, 4, 6, 8]  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8191-9aad-d862fa7b436d",
            "parent": "```python\nnums = [1, 2, 3, 4]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled)  # [2, 4, 6, 8]\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81ab-b233-ca2750a6a650",
        "parent": "",
        "children": []
      }
    ]
  },
  {
    "type": "child_page",
    "blockId": "16c2297f-7a72-80b3-a867-f9e842f141de",
    "parent": "## 例外処理",
    "children": [
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81fe-86cb-fccb1ce0d422",
        "parent": "今回はPythonの「例外処理」について説明します。",
        "children": []
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-81ee-a370-da54cf94ad82",
        "parent": "## 例外処理の基本：try、except",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-81d9-b8dd-d24b6273f9d1",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81bb-8c9e-d005447c8f1e",
        "parent": "Pythonの例外処理は、プログラムの実行中に発生するエラーを適切に扱い、プログラムのクラッシュを防ぐための仕組みです。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8119-a451-dfef67e5a561",
        "parent": "例外処理を行うには、`try`、`except`を使います。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-810d-a8f6-e0228d5b89a8",
        "parent": "> ### 基本構文  \n>   \n> ```python  \n> try:  \n> \tエラーの可能性のある処理  \n> except 想定されるエラー:  \n> \tエラーが起こった場合の処理  \n> ```",
        "children": [
          {
            "type": "heading_3",
            "blockId": "16c2297f-7a72-8118-83df-e125a0576682",
            "parent": "### 基本構文",
            "children": []
          },
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8154-ac34-dfb467db27e1",
            "parent": "```python\ntry:\n\tエラーの可能性のある処理\nexcept 想定されるエラー:\n\tエラーが起こった場合の処理\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-819d-90c1-f1364ad74a00",
        "parent": "例えば、ゼロによる除算が行われると`ZeroDivisionError`というエラーが発生して処理が終了します。`try`、`except`を使うとそのようなエラーが起こった場合の処理を書くことができます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-819f-be9c-ee0ef324ec5f",
        "parent": "> ### 例  \n>   \n> ```python  \n> a = 1  \n> b = 0  \n>   \n> try:  \n>     print(a / b)  \n> except ZeroDivisionError:  \n>     print('Error')  \n> ```",
        "children": [
          {
            "type": "heading_3",
            "blockId": "16c2297f-7a72-8153-9289-f3255138e2e7",
            "parent": "### 例",
            "children": []
          },
          {
            "type": "code",
            "blockId": "16c2297f-7a72-819f-87f7-ce39f302e3e6",
            "parent": "```python\na = 1\nb = 0\n\ntry:\n    print(a / b)\nexcept ZeroDivisionError:\n    print('Error')\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8141-a98e-ce93a3abf3b1",
        "parent": "この例では、`a`を`b`で割り算しています。`b`が`0`でない場合は割り算の答えが`print関数`で出力され、`b`が`0`だった場合は`Error`と出力されます。そして、このコードでは`b = 0`なので以下のように出力されます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-815e-a9ac-f8b8b9a4d6ba",
        "parent": "> 出力  \n> ```bash  \n> Error  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8195-936c-c70fb74be1c9",
            "parent": "```bash\nError\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81a5-9dab-c4147d0f3ba5",
        "parent": "さらに、`except 例外名 as 変数名:`とすると、変数にエラーを格納して使用できる。変数名は任意の名前を指定できるが、`e`や`err`といった名前が使われることが多い。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8105-9758-cfd58d44e211",
        "parent": "> ### エラーを変数に格納する  \n>   \n> ```python  \n> a = 1  \n> b = 0  \n>   \n> try:  \n>     print(a / b)  \n> **except ZeroDivisionError as e:  \n>     print('Error')  \n>     print(e)**  \n> ```",
        "children": [
          {
            "type": "heading_3",
            "blockId": "16c2297f-7a72-81d0-b97c-c04a9c13b92c",
            "parent": "### エラーを変数に格納する",
            "children": []
          },
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8130-95fa-eab3a074cec0",
            "parent": "```python\na = 1\nb = 0\n\ntry:\n    print(a / b)\n**except ZeroDivisionError as e:\n    print('Error')\n    print(e)**\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81c8-8171-fa13dfaaf224",
        "parent": "このように書くと、以下のようにエラーが出力されます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81fc-baca-ff5a122fef18",
        "parent": "> 出力  \n> ```bash  \n> Error  \n> division by zero  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8141-931f-ebec031b58d0",
            "parent": "```bash\nError\ndivision by zero\n```",
            "children": []
          }
        ]
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-8134-a491-c5b323fa6a72",
        "parent": "## 正常終了時の処理：else",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-81ee-b52c-c908a9f1944f",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8180-935f-c3b1ac430430",
        "parent": "`try`節で例外が発生せず正常終了したあとに行う処理を`else`節に指定できる。例外が発生して`except`で例外処理をした場合は`else`節の処理は実行されません。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-8182-9dab-c5ef95ea8d29",
        "parent": "> ### 正常終了した場合の処理を書く  \n>   \n> ```python  \n> a = 20  \n> b = 5  \n>   \n> try:  \n>     result = a / b  \n> except ZeroDivisionError as e:  \n>     print('Error:', e)  \n> **else:  \n> \tprint(\"success:\", result)**  \n> ```",
        "children": [
          {
            "type": "heading_3",
            "blockId": "16c2297f-7a72-8132-bb9b-d1847a48e22e",
            "parent": "### 正常終了した場合の処理を書く",
            "children": []
          },
          {
            "type": "code",
            "blockId": "16c2297f-7a72-8119-a7c3-d487532f8230",
            "parent": "```python\na = 20\nb = 5\n\ntry:\n    result = a / b\nexcept ZeroDivisionError as e:\n    print('Error:', e)\n**else:\n\tprint(\"success:\", result)**\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81ea-8b64-e2bd8f82e369",
        "parent": "この場合、`try`節で`result = a / b`の処理がされます。`b=0`の場合は`except`節の処理が行われますが、今回は`b = 5`なので、`else`節の処理が行われ、以下のように出力されます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81bc-9134-c87fe41a1d89",
        "parent": "> 出力  \n> ```bash  \n> success: 4  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-819a-9e86-e4ba14595267",
            "parent": "```bash\nsuccess: 4\n```",
            "children": []
          }
        ]
      },
      {
        "type": "heading_2",
        "blockId": "16c2297f-7a72-8186-a139-cf2554877e43",
        "parent": "## **終了時に常に行う処理： finally**",
        "children": []
      },
      {
        "type": "divider",
        "blockId": "16c2297f-7a72-8139-8666-ef49cc5aa49a",
        "parent": "---",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81ce-9cf7-d0be22073466",
        "parent": "例外が発生した場合もしなかった場合も常に最後に行う処理を`finally`節に指定できます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-81af-9951-f7753ff76a2e",
        "parent": "> ### 終了時に常に行う処理を書く  \n>   \n> ```python  \n> a = 20  \n> b = 5  \n>   \n> try:  \n>     result = a / b  \n> except ZeroDivisionError as e:  \n>     print('Error:', e)  \n> else:  \n> \tprint(\"success:\", result)  \n> **finally:  \n> \tprint(\"finish\")**  \n> ```",
        "children": [
          {
            "type": "heading_3",
            "blockId": "16c2297f-7a72-8184-89d8-e0eaba1d60e9",
            "parent": "### 終了時に常に行う処理を書く",
            "children": []
          },
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81bc-84fe-d07436747086",
            "parent": "```python\na = 20\nb = 5\n\ntry:\n    result = a / b\nexcept ZeroDivisionError as e:\n    print('Error:', e)\nelse:\n\tprint(\"success:\", result)\n**finally:\n\tprint(\"finish\")**\n```",
            "children": []
          }
        ]
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-8165-a4fc-c5c5a73c09ae",
        "parent": "この場合、`try`節で`result = a / b`の処理がされます。`b`の値が`0`か否かで`except`節の処理か`else`節の処理が行われますが、いずれの場合でも`finally`節の処理、`print(”finish”)` が行われます。",
        "children": []
      },
      {
        "type": "paragraph",
        "blockId": "16c2297f-7a72-81b2-83bc-e35eefb06c3c",
        "parent": "このコードの場合は`b=5`なので、以下のように出力されます。",
        "children": []
      },
      {
        "type": "callout",
        "blockId": "16c2297f-7a72-816f-b70a-d2afe445cff9",
        "parent": "> 出力  \n> ```bash  \n> success: 4  \n> finish  \n> ```",
        "children": [
          {
            "type": "code",
            "blockId": "16c2297f-7a72-81c2-87cf-d93270f2be49",
            "parent": "```bash\nsuccess: 4\nfinish\n```",
            "children": []
          }
        ]
      }
    ]
  }
]